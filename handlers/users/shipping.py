# #TODO: –ê–¥–º–∏–Ω—Å–∫–∞—è —á–∞—Å—Ç—å –≤—ã–≤–æ–¥ –∑–∞—è–≤–æ–∫ –Ω–∞ –¥–æ—Å—Ç–∞–≤–∫—É –ø–æ –¥–∞—Ç–∞–º
# from datetime import datetime, timezone
#
# from aiogram.dispatcher import FSMContext
# from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton, ReplyKeyboardRemove
#
# from loader import dp, bot, db
# from aiogram import types
#
# from keyboards.inline.inline_buttons import admin_inline_staff, admin_inline_send_ls, \
#     user_inline_approve, admin_inline_shipping_order
#
# from keyboards.default.menu import menuUser, menuAdmin, \
#     send_phone_cancel, cancel_btn
#
# from states.shipping import Shipping
# from utils.db_api.db_commands import DBCommands
#
# from aiogram.dispatcher.filters import Text
# from data.config import admins
#
# db = DBCommands()
#
#
# ### –õ–æ–≤–ª—é –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–∞–∑–≤–∞–Ω–∏–µ –±–ª—é–¥–∞
# @dp.message_handler(content_types=["text"], state=Shipping.title_item)
# async def shipping_title(message: types.Message, state: FSMContext):
#     await Shipping.portion_quantity.set()
#
#     async with state.proxy() as data:
#         data['title'] = message.text
#         data['user_name'] = message.from_user.username
#         data['user_id'] = message.from_user.id
#
#     text = "<b>–®–∞–≥ [2/8]</b> –í–≤–µ–¥–∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ—Ä—Ü–∏–π (–µ—Å–ª–∏ –±–ª—é–¥–∞ –Ω–µ –æ–¥–Ω–æ, —Ç–æ –≤–≤–µ–¥–∏ —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é –≤ —Ç–æ–º –ø–æ—Ä—è–¥–∫–µ —á—Ç–æ –∏ –Ω–∞–∑–≤–∞–Ω–∏—è –±–ª—é–¥)"
#     await message.answer(text=text, reply_markup=cancel_btn)
#
#
# ### –õ–æ–≤–ª—é –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ—Ä—Ü–∏–π
# @dp.message_handler(content_types=["text"], state=Shipping.portion_quantity)
# async def shipping_portion_quantity(message: types.Message, state: FSMContext):
#     if message.text.isdigit():
#         await Shipping.number_of_devices.set()
#
#         async with state.proxy() as data:
#             data['portion_quantity'] = message.text
#
#         text = "<b>–®–∞–≥ [3/8]</b> –°–∫–æ–ª—å–∫–æ –ø—Ä–∏–±–æ—Ä–æ–≤ –ø–æ—Ç—Ä–µ–±—É–µ—Ç—Å—è?"
#         await message.answer(text=text, reply_markup=cancel_btn)
#     else:
#         text = "–Ø –¢–µ–±—è –Ω–µ –ø–æ–Ω–∏–º–∞—é, –≤–≤–µ–¥–∏ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ!!! \n <b>–®–∞–≥ [2/8]</b> –í–≤–µ–¥–∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ—Ä—Ü–∏–π (–µ—Å–ª–∏ –±–ª—é–¥–∞ –Ω–µ –æ–¥–Ω–æ, —Ç–æ –≤–≤–µ–¥–∏ —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é –≤ —Ç–æ–º –ø–æ—Ä—è–¥–∫–µ —á—Ç–æ –∏ –Ω–∞–∑–≤–∞–Ω–∏—è –±–ª—é–¥)"
#         await message.answer(text=text, reply_markup=cancel_btn)
#
#
# ### –õ–æ–≤–ª—é –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–∏–±–æ—Ä–æ–≤
# @dp.message_handler(content_types=["text"], state=Shipping.number_of_devices)
# async def shipping_number_of_devices(message: types.Message, state: FSMContext):
#     if message.text.isdigit():
#         await Shipping.data.set()
#         async with state.proxy() as data:
#             data['number_of_devices'] = message.text
#
#         date = datetime.now().strftime('%d.%m.%Y').split('.')
#         text = "<b>–®–∞–≥ [4/8]</b> –ù–∞ –∫–∞–∫—É—é –¥–∞—Ç—É –æ—Ñ–æ—Ä–º–∏—Ç—å –¥–æ—Å—Ç–∞–≤–∫—É?\n"
#         text += f"–í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –≤ —Ñ–æ—Ä–º–∞—Ç–µ –î–î.–ú–ú.–ì–ì–ì–ì \n –°–µ–≥–æ–¥–Ω—è {datetime.strftime(datetime.now(), '%d.%m.%Y')}"
#         await message.answer(text=text, reply_markup=cancel_btn)
#     else:
#         text = "–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é —è –¢–µ–±—è –Ω–µ –ø–æ–Ω–∏–º–∞—é, –≤–≤–µ–¥–∏ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ!!! \n <b>–®–∞–≥ [3/8]</b> –°–∫–æ–ª—å–∫–æ –ø—Ä–∏–±–æ—Ä–æ–≤ –ø–æ—Ç—Ä–µ–±—É–µ—Ç—Å—è?"
#         await message.answer(text=text, reply_markup=cancel_btn)
#
#
# ### –õ–æ–≤–ª—é –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–∞—Ç—É –¥–æ—Å—Ç–∞–≤–∫–∏
# @dp.message_handler(content_types=["text"], state=Shipping.data)
# async def shipping_number_of_devices(message: types.Message, state: FSMContext):
#     try:
#         date = message.text
#         if len(date.split('.')) == 3:
#             if (len(date.split('.')[0]) == 2) and (len(date.split('.')[1]) == 2) and (len(date.split('.')[2]) == 4):
#                 if datetime.strptime(date, "%d.%m.%Y") < datetime.now():
#                     raise Exception('data error')
#                 else:
#                     async with state.proxy() as data:
#                         data["data"] = datetime.strptime(message.text.replace(".", "-"), "%d-%m-%Y").date()
#
#                     await Shipping.time.set()
#
#                     text = "<b>–®–∞–≥ [5/8]</b>\n\n –ö –∫–∞–∫–æ–º—É –≤—Ä–µ–º–µ–Ω–∏ –¥–æ—Å—Ç–≤–∏—Ç—å? –í–≤–µ–¥–∏ –≤—Ä–µ–º—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ –ß–ß.–ú–ú, –ß–ß:–ú–ú, –ß–ß-–ú–ú –∏–ª–∏ –ß–ß –ú–ú"
#                     await message.answer(text, parse_mode=types.ParseMode.HTML)
#         else:
#             raise Exception("input error")
#     except Exception as _ex:
#         if (str(_ex) == 'input error') or (str(_ex) == 'day is out of range for month'):
#             text = f"<b>–®–∞–≥ [5/8]</b>\n\n–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é —è –¢–µ–±—è –Ω–µ –ø–æ–Ω–∏–º–∞—é, –≤–≤–µ–¥–∏—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é –¥–∞—Ç—É –≤ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–º —Ñ–æ—Ä–º–∞—Ç–µ –î–î.–ú–ú.–ì–ì–ì–ì, —Å–µ–≥–æ–¥–Ω—è {datetime.strftime(datetime.now(), '%d.%m.%Y')}"
#
#         elif str(_ex) == 'data error':
#             #–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é –≤—Ä–µ–º—è –Ω–µ –≤–µ—Ä–Ω—É—Ç—å –Ω–∞–∑–∞–¥, —É–∫–∞–∂–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é –¥–∞—Ç—É, —Å–µ–≥–æ–¥–Ω—è 24.02.2023
#             text = f"<b>–®–∞–≥ [5/8]</b>\n\n–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é –≤—Ä–µ–º—è –Ω–µ –≤–µ—Ä–Ω—É—Ç—å –Ω–∞–∑–∞–¥ üò¢ –í–≤–µ–¥–∏ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é –¥–∞—Ç—É –≤ —Ñ–æ—Ä–º–∞—Ç–µ –î–î.–ú–ú.–ì–ì–ì–ì, —Å–µ–≥–æ–¥–Ω—è {datetime.strftime(datetime.now(), '%d.%m.%Y')}"
#
#         text = ""
#         await message.answer(text=text)
#         return
#
#
# ### –õ–æ–≤–ª—é –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤—Ä–µ–º—è –¥–æ—Å—Ç–∞–≤–∫–∏
# @dp.message_handler(content_types=["text"], state=Shipping.time)
# async def shipping_time(message: types.Message, state: FSMContext):
#     msg = message.text
#     data = await state.get_data()
#     try:
#         if len(msg) == 5:
#             if " " in msg:
#                 msg = msg.replace(" ", ":")
#             elif "." in msg:
#                 msg = msg.replace(".", ":")
#             elif "-" in msg:
#                 msg = msg.replace("-", ":")
#
#             msg = msg + ":00"
#
#             time = datetime.strptime(msg, '%H:%M:%S').time()
#             if data['data'] == datetime.now() and time < datetime.now().time():
#                 raise Exception('time error')
#             else:
#                 await Shipping.address.set()
#
#                 async with state.proxy() as data:
#                     data["time"] = time.strftime("%H:%M:%S")
#
#                 await message.answer("<b>–®–∞–≥ [6/8]</b> –í–≤–µ–¥–∏ –∞–¥—Ä–µ—Å –¥–æ—Å—Ç–∞–≤–∫–∏",
#                                      parse_mode=types.ParseMode.HTML)
#     except Exception as _ex:
#         if str(_ex) == 'time error':
#             text = "–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é –≤—Ä–µ–º—è –Ω–µ –≤–µ—Ä–Ω—É—Ç—å –Ω–∞–∑–∞–¥ üò¢ –í–≤–µ–¥–∏ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –≤—Ä–µ–º—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ –ß–ß.–ú–ú, –ß–ß:–ú–ú, –ß–ß-–ú–ú –∏–ª–∏ –ß–ß –ú–ú"
#         else:
#             text = "–Ø –¢–µ–±—è, –∫ —Å–æ–∂–∞–ª–µ–Ω–∏—é, –Ω–µ –ø–æ–Ω–∏–º–∞—é. –í–≤–µ–¥–∏ –≤—Ä–µ–º—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ –ß–ß.–ú–ú, –ß–ß:–ú–ú, –ß–ß-–ú–ú –∏–ª–∏ –ß–ß –ú–ú"
#
#         await message.answer(text=text)
#         return
#
#
# ### –õ–æ–≤–ª—é –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∞–¥—Ä–µ—Å—Å –¥–æ—Å—Ç–∞–≤–∫–∏
# @dp.message_handler(content_types=["text"], state=Shipping.address)
# async def shipping_time(message: types.Message, state: FSMContext):
#     await Shipping.phone.set()
#
#     text = "<b>–®–∞–≥ [7/8]</b> –í–≤–µ–¥–∏ –∏–ª–∏ –æ—Ç–ø—Ä–∞–≤—å –°–≤–æ–π –∫–æ–Ω—Ç–∞–∫—Ç–Ω—ã–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ "
#     msg = await message.answer(text=text, reply_markup=send_phone_cancel)
#
#     async with state.proxy() as data:
#         data['address'] = message.text
#         data['message_id'] = msg.message_id
#
#
# ### –õ–æ–≤–ª—é –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞
# @dp.message_handler(content_types=["contact", "text"], state=Shipping.phone)
# async def shipping_time(message: types.Message, state: FSMContext):
#     await Shipping.pay_method.set()
#
#     async with state.proxy() as data:
#         if message.content_type == 'contact':
#             if message.contact.phone_number[0] != "+":
#                 data["phone_number"] = "+" + message.contact.phone_number
#             else:
#                 data["phone_number"] = message.contact.phone_number
#             data["name"] = message.contact.last_name
#         else:
#             data["phone_number"] = message.text
#             data["name"] = message.from_user.username
#
#     text = "<b>–®–∞–≥ [8/8]</b> üí≥ vs üíµ"
#     msg = await message.answer(text=text, reply_markup=cancel_btn)
#     markup = InlineKeyboardMarkup()
#     markup.add(
#         InlineKeyboardButton(text="üí≥ –ö–∞—Ä—Ç–∞", callback_data="pay_method_card"),
#         InlineKeyboardButton(text="üíµ –ù–∞–ª–∏—á–∫–∞", callback_data="pay_method_money"),
#     )
#     await message.answer(text="–í—ã–±–µ—Ä–∏ —Å–ø–æ—Å–æ–± –æ–ø–ª–∞—Ç—ã", reply_markup=markup)
#
#
# ### –õ–æ–≤–ª—é –æ—Ç–≤–µ—Ç –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å–ø–æ—Å–æ–± –æ–ø–ª–∞—Ç—ã
# @dp.callback_query_handler(text=["pay_method_card", "pay_method_money"], state=Shipping.pay_method)
# async def shipping_pay_method(call: types.CallbackQuery, state: FSMContext):
#     await Shipping.check.set()
#
#     await call.message.edit_reply_markup(reply_markup="")
#
#     async with state.proxy() as data:
#         data['pay_method'] = call.data
#
#     text = f"""{data['name']}, –¢–≤–æ–π –∑–∞–∫–∞–∑\n
#     1Ô∏è‚É£ {data['title']}\n
#     2Ô∏è‚É£ {data['portion_quantity']}\n
#     3Ô∏è‚É£ {data['number_of_devices']}\n
#     4Ô∏è‚É£ {data['data']}\n
#     5Ô∏è‚É£ {data['time']}\n
#     6Ô∏è‚É£ {data['address']}\n
#     7Ô∏è‚É£ {data['pay_method']}\n
#     8Ô∏è‚É£ {data['phone_number']}\n
#     –ï—Å–ª–∏ –≤—Å—ë –ø—Ä–∞–≤–∏–ª—å–Ω–æ, –ø–æ–¥—Ç–≤–µ—Ä–¥–∏
# """
#     await call.message.answer(text=text, reply_markup=user_inline_approve)
#
#
# ### –õ–æ–≤–ª—é –æ—Ç–≤–µ—Ç –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –æ –ø—Ä–æ–≤–µ—Ä–∫–µ –¥–∞–Ω–Ω—ã—Ö
# @dp.callback_query_handler(text=["approve_order_user", "cancel_order_user"], state=Shipping.check)
# async def shipping_user_check_data(call: types.CallbackQuery, state: FSMContext):
#     await call.message.edit_reply_markup(reply_markup="")
#     await call.message.delete()
#
#     await call.answer(cache_time=60)
#
#     if call.data == "approve_order_user":
#         data = await state.get_data()
#
#         order_id = await db.add_new_shipping_order(
#             title=data['title'], portion_quantity=int(data['portion_quantity']),
#             number_of_devices=int(data['number_of_devices']),
#             address=data['address'], phone=data['phone_number'], data_reservation=data['data'],
#             time_reservation=data['time'][:-3], pay_method=data['pay_method'], user_id=str(data['user_id']),
#             user_name=data['user_name']
#         )
#         text = f"{data['user_name']} –¢–≤–æ—è –∑–∞—è–≤–∫–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –Ω–∞—à–µ–º—É —Å–æ—Ç—Ä—É–¥–Ω–∏–∫—É. –û–∂–∏–¥–∞–π. –û–Ω —Å –¢–æ–±–æ–π —Å–∫–æ—Ä–æ —Å–≤—è–∂–µ—Ç—Å—è"
#         await call.message.answer(text=text, reply_markup=menuUser)
#         text = "–ü–æ—Å—Ç—É–ø–∏–ª–∞ –∑–∞—è–≤–∫–∞ –Ω–∞ –¥–æ—Å—Ç–∞–≤–∫—É\n"
#         text += f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å @{data['user_name']} –∑–∞–∫–∞–∑–∞–ª:\n"
#         text += f"{data['title']}\n"
#         text += f"–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ—Ä—Ü–∏–π: {data['portion_quantity']}\n"
#         text += f"–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–∏–±–æ—Ä–æ–≤: {data['number_of_devices']}\n"
#         text += f"–î–∞—Ç–∞ –¥–æ—Å—Ç–∞–≤–∫–∏: {data['data']}\n"
#         text += f"–í—Ä–µ–º—è –¥–æ—Å—Ç–∞–≤–∫–∏: {data['time']}\n"
#         text += f"–ê–¥—Ä–µ—Å –¥–æ—Å—Ç–∞–≤–∫–∏: {data['address']}\n"
#         if data['pay_method'] == "pay_method_card":
#             text += "–°–ø–æ—Å–æ–± –æ–ø–ª–∞—Ç—ã: –ö–∞—Ä—Ç–∞\n"
#         elif data['pay_method'] == "pay_method_money":
#             text += "–°–ø–æ—Å–æ–± –æ–ø–ª–∞—Ç—ã: –ù–∞–ª–∏—á–Ω—ã–µ\n"
#         text += f"–ö–æ–Ω—Ç–∞–∫—Ç–Ω—ã–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞: {data['phone_number']}\n"
#
#         markup = InlineKeyboardMarkup()
#
#         markup.add(
#             InlineKeyboardButton(text="–í–∑—è—Ç—å –≤ —Ä–∞–±–æ—Ç—É", callback_data=f"admin_approve_shipping-{order_id}"),
#             InlineKeyboardButton(text="–û—Ç–º–µ–Ω–∞", callback_data=f"admin_cancel_shipping-{order_id}")
#         )
#         markup.row(
#             InlineKeyboardButton("–ù–∞–ø–∏—Å–∞—Ç—å –≥–æ—Å—Ç—é –≤ –õ–°", callback_data=f"shipping_write_to_pm-{order_id}",
#                                  url=f"https://t.me/{data['user_name']}")
#         )
#
#         await bot.send_message(chat_id=admins[0], text=text, reply_markup=markup)
#         await state.finish()
#
#     elif call.data == "cancel_order_user":
#         await Shipping.title_item.set()
#         text = f"<b>–®–∞–≥ [1/8]</b> –í–≤–µ–¥–∏ –Ω–∞–∑–≤–∞–Ω–∏–µ –±–ª—é–¥–∞ (–µ—Å–ª–∏ –±–ª—é–¥ –Ω–µ—Å–∫–æ–ª—å–∫–æ, —Ç–æ –≤–≤–µ–¥–∏ —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é)"
#         await call.message.answer(text=text, reply_markup=cancel_btn)
#
#
# ### –õ–æ–≤–ª—é –æ—Ç–≤–µ—Ç –æ—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –æ –∑–∞—è–≤–∫–µ
# # @dp.callback_query_handler(text_contains=["shipping"])
# # async def shipping_admin_check_order(call: types.CallbackQuery):
# #     await call.message.edit_reply_markup(reply_markup="")
# #     data = call.data.split('-')
# #
# #     await db.update_shipping_order_status(id=int(data[1]), admin_name=call.from_user.username,
# #                                             admin_id=str(call.from_user.id), admin_answer=data[0])
#
