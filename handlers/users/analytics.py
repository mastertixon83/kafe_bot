# TODO: –£–¥–∞–ª–µ–Ω–∏–µ –∫–∞—Ä—Ç—ã –ª–æ—è–ª—å–Ω–æ—Å—Ç–∏
import json
import re
import time
from datetime import datetime, timezone, timedelta
import csv
import openpyxl

from io import BytesIO

from aiogram.dispatcher import FSMContext

from loader import dp, bot, db, logger
from aiogram import types

from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton, ReplyKeyboardRemove
from keyboards.default.menu import menuAdmin, newsletter_kbd, analytics_kbd
from states.analytics import Analytics
from utils.db_api.db_commands import DBCommands

from aiogram.dispatcher.filters import Text
from data.config import admins
import logging

db = DBCommands()


def plural_form(n, word):
    """–û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–≥–æ –Ω–∞–ø–∏—Å–∞–Ω–∏—è —Ñ–æ—Ä–º—ã —Å–ª–æ–≤–∞"""
    if 2 <= n % 10 <= 4 and (n % 100 < 10 or n % 100 >= 20):
        return f"{n} {word}–∞"
    else:
        return f"{n} {word}"


def data_preparation():
    """–ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –¥–∞—Ç –¥–ª—è –∑–∞–ø—Ä–æ—Å–∞"""
    # –ó–∞ —Å–µ–≥–æ–¥–Ω—è
    start_date = datetime.now().replace(hour=0, minute=0, second=0, microsecond=0)
    end_date = start_date + timedelta(days=1)

    # –ó–∞ –Ω–µ–¥–µ–ª—é
    today_week = datetime.now().replace(hour=0, minute=0, second=0, microsecond=0)
    start_date_week = today_week - timedelta(days=today_week.weekday() + 4)
    end_date_week = start_date_week + timedelta(days=7)

    # –ó–∞ –ø—Ä–µ–¥—ã–¥—É—â–∏–π –º–µ—Å—è—Ü
    today_month = datetime.now().replace(day=1, hour=0, minute=0, second=0, microsecond=0)
    start_date_month = (today_month - timedelta(days=1)).replace(day=1)
    end_date_month = today_month

    # –ó–∞ –º–µ—Å—è—Ü
    today_prev_month = datetime.now().replace(hour=0, minute=0, second=0, microsecond=0)
    start_date_prev_month = today_prev_month.replace(day=1)
    end_date_prev_month = today_prev_month + timedelta(days=1)

    return {
        "start_date": start_date,
        "end_date": end_date,
        "start_date_week": start_date_week,
        "end_date_week": end_date_week,
        "start_date_month": start_date_month,
        "end_date_month": end_date_month,
        "start_date_prev_month": start_date_prev_month,
        "end_date_prev_month": end_date_prev_month
    }


@dp.callback_query_handler(text=["excel_users"], state=Analytics.main)
async def download_users_to_excel(call: types.CallbackQuery, state: FSMContext):
    """–í—ã–≥—Ä—É–∑–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤ Excel —Ñ–∞–π–ª"""
    all_users_info = await db.get_all_users()
    result = []

    for user in all_users_info:
        created_at = user["created_at"].date()
        user_id = user["user_id"]
        username = user["username"]
        full_name = user["full_name"]
        gender = user["gender"]
        employment = user["employment"]
        referral = user["referral"]
        referral_id = user["referral_id"]
        card_fio = user["card_fio"]
        card_phone = user["card_phone"]
        card_number = user["card_number"]
        card_status = user["card_status"]
        birthday = user["birthday"]
        prize = user["prize"]
        balance = user["balance"]
        administrator = "–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä" if user["administrator"] == True else None
        director = "–î–∏—Ä–µ–∫—Ç–æ—Ä" if user["director"] == True else None
        ban_status = "–ó–∞–±–∞–Ω–µ–Ω" if user["ban_status"] == True else None
        reason_for_ban = user["reason_for_ban"]

        result.append(
            [created_at, birthday, user_id, username, full_name, gender, employment, card_phone, card_number, card_fio,
             card_status, prize, balance, referral, referral_id,
             administrator, director, ban_status, reason_for_ban]
        )
    # TODO: –†–∞–∑–æ–±—Ä–∞—Ç—å—Å—è —Å –∫–æ–¥–∏—Ä–æ–≤–∫–∏–π —Ñ–∞–π–ª–∞ –∏ –≤—ã–≥—Ä—É–∑–∫–æ–π –≤ Excel
    book = openpyxl.Workbook()
    book.remove(book.active)
    book.create_sheet("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏")
    sheet = book['–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏']

    sheet.cell(row=1, column=1).value = "–î–∞—Ç–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏"
    sheet.cell(row=1, column=2).value = "–î–µ–Ω—å —Ä–æ–∂–¥–µ–Ω–∏—è"
    sheet.cell(row=1, column=3).value = "User_id"
    sheet.cell(row=1, column=4).value = "Username"
    sheet.cell(row=1, column=5).value = "Full_name"
    sheet.cell(row=1, column=6).value = "–ü–æ–ª"
    sheet.cell(row=1, column=7).value = "–í–∏–¥ –∑–∞–Ω—è—Ç–æ—Å—Ç–∏"
    sheet.cell(row=1, column=8).value = "–ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞"
    sheet.cell(row=1, column=9).value = "–ù–æ–º–µ—Ä –∫–∞—Ä—Ç—ã"
    sheet.cell(row=1, column=10).value = "–§–∞–º–∏–ª–∏—è –ò–º—è –Ω–∞ –∫–∞—Ä—Ç–µ"
    sheet.cell(row=1, column=11).value = "–°—Ç–∞—Ç—É—Å –∫–∞—Ä—Ç—ã"
    sheet.cell(row=1, column=12).value = "–ü—Ä–∏–∑–æ–≤—ã–µ –∫–æ–¥—ã"
    sheet.cell(row=1, column=13).value = "–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–æ –ø—Ä–∏–∑–æ–≤—ã—Ö –∫–æ–¥–æ–≤"
    sheet.cell(row=1, column=14).value = "Referral_id"
    sheet.cell(row=1, column=15).value = "Referral"
    sheet.cell(row=1, column=16).value = "–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä"
    sheet.cell(row=1, column=17).value = "–î–∏—Ä–µ–∫—Ç–æ—Ä"
    sheet.cell(row=1, column=18).value = "–°—Ç–∞—Ç—É—Å –±–∞–Ω–∞"
    sheet.cell(row=1, column=19).value = "–ü—Ä–∏—á–∏–Ω–∞ –±–∞–Ω–∞"

    for i, item in enumerate(result, start=2):
        sheet.cell(row=i, column=1).value = item[0]
        sheet.cell(row=i, column=2).value = item[1]
        sheet.cell(row=i, column=3).value = item[2]
        sheet.cell(row=i, column=4).value = item[3]
        sheet.cell(row=i, column=5).value = item[4]
        sheet.cell(row=i, column=6).value = item[5]
        sheet.cell(row=i, column=7).value = item[6]
        sheet.cell(row=i, column=8).value = item[7]
        sheet.cell(row=i, column=9).value = item[8]
        sheet.cell(row=i, column=10).value = item[9]
        sheet.cell(row=i, column=11).value = item[10]
        sheet.cell(row=i, column=12).value = item[11]
        sheet.cell(row=i, column=13).value = item[12]
        sheet.cell(row=i, column=14).value = item[13]
        sheet.cell(row=i, column=15).value = item[14]
        sheet.cell(row=i, column=16).value = item[15]
        sheet.cell(row=i, column=17).value = item[16]
        sheet.cell(row=i, column=18).value = "–ó–∞–±–∞–Ω–µ–Ω" if item[17] == True else ""
        sheet.cell(row=i, column=19).value = item[18]

    book.save("users.xlsx")
    book.close()

    with open("users.xlsx", 'rb') as file:
        wb = openpyxl.load_workbook(file)
        ws = wb.active
        output = BytesIO()
        wb.save(output)
        output.seek(0)

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–∞–π–ª –≤ —Å–æ–æ–±—â–µ–Ω–∏–∏
        xls_file = types.InputFile(output, filename="users.xlsx")

        await bot.send_document(chat_id=call.message.chat.id, document=xls_file, caption="–í—ã–≥—Ä—É–∑–∫–∞-–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏")


@dp.message_handler(Text(contains=["–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏"]), state=Analytics.main)
async def analytics_users(message: types.Message, state: FSMContext):
    """–õ–æ–≤–ª—é –Ω–∞–∂–∞—Ç–∏–µ –Ω–∞ –∫–Ω–æ–ø–∫—É –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏"""
    await message.delete()
    users_nb_info = await db.get_all_nb_users()
    all_users_info = await db.get_all_users()

    text = f"–ê–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {len(users_nb_info)}\n–í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {len(all_users_info)}"
    markup = InlineKeyboardMarkup()
    markup.add(
        InlineKeyboardButton(text="–í—ã–≥—Ä—É–∑–∏—Ç—å Excel —Ñ–∞–π–ª", callback_data="excel_users")
    )
    msg = await message.answer(text=text, reply_markup=markup)

    data = await state.get_data()
    id_msg_list = data['id_msg_list']
    id_msg_list.append(msg.message_id)
    async with state.proxy() as data:
        data['id_msg_list'] = id_msg_list


@dp.message_handler(Text(contains=["–†–∞—Å—Å—ã–ª–∫–∏"]), state=Analytics.main)
async def analytics_mailings(message: types.Message, state: FSMContext):
    """–õ–æ–≤–ª—é –Ω–∞–∂–∞—Ç–∏–µ –Ω–∞ –∫–Ω–æ–ø–∫—É –§–æ—Ä–º—ã —Ä–∞—Å—Å—ã–ª–æ–∫-–∞–Ω–∫–µ—Ç"""
    await message.delete()
    total = 0
    type_mailing_list = ["standard", "birthday", "hall_reservation", "shipping", "loyal_card"]
    type_mailing_dict = {
        "standard": "üì® –û–±—ã—á–Ω–∞—è —Ä–∞—Å—Å—ã–ª–∫–∞",
        "birthday": "üéÅ –ü—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –¥–ª—è –∏–º–µ–Ω–∏–Ω–Ω–∏–∫–æ–≤",
        "hall_reservation": "üçΩ –ü—Ä–∏–∑—ã–≤ –∫ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—é",
        "shipping": "üöö –ó–∞–∫–∞–∂–∏—Ç–µ –¥–æ—Å—Ç–∞–≤–∫—É",
        "loyal_card": "üí≥ –í–ª–∞–¥–µ–ª—å—Ü–∞–º –∫–∞—Ä—Ç –ª–æ—è–ª—å–Ω–æ—Å—Ç–∏"}
    text = ""
    kwargs = data_preparation()
    for item in type_mailing_list:
        # –ó–∞ —Å–µ–≥–æ–¥–Ω—è
        today_count = len(
            await db.get_tasks_mailing(type_mailing=item, start_date=kwargs['start_date'], end_date=kwargs['end_date']))
        # –ó–∞ –Ω–µ–¥–µ–ª—é
        week_count = len(
            await db.get_tasks_mailing(type_mailing=item, start_date=kwargs['start_date_week'],
                                       end_date=kwargs['end_date_week']))
        # –ó–∞ –ø—Ä–µ–¥—ã–¥—É—â–∏–π –º–µ—Å—è—Ü
        month_count = len(
            await db.get_tasks_mailing(type_mailing=item, start_date=kwargs['start_date_month'],
                                       end_date=kwargs['end_date_month']))
        # –ó–∞ –º–µ—Å—è—Ü
        prev_month_count = len(
            await db.get_tasks_mailing(type_mailing=item,
                                       start_date=kwargs['start_date_prev_month'].replace(day=1) - timedelta(days=1),
                                       end_date=kwargs['end_date_prev_month']))

        text += f"<b>{type_mailing_dict[item]}</b>\n"
        text += f" –ó–∞ —Å–µ–≥–æ–¥–Ω—è: {today_count}\n"
        text += f" –ó–∞ –Ω–µ–¥–µ–ª—é: {week_count}\n"
        text += f" –ó–∞ —Ç–µ–∫—É—â–∏–π –º–µ—Å—è—Ü: {prev_month_count}\n"
        text += f" –ó–∞ –ø—Ä–µ–¥—ã–¥—É—â–∏–π –º–µ—Å—è—Ü: {month_count}\n"
        text += f'{"-" * 50}\n'

    msg = await message.answer(text=text)

    data = await state.get_data()
    id_msg_list = data['id_msg_list']
    id_msg_list.append(msg.message_id)
    async with state.proxy() as data:
        data['id_msg_list'] = id_msg_list


@dp.message_handler(Text(contains=["–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –≤—ã–∑–æ–≤–æ–≤–∞ –ø–µ—Ä—Å–æ–Ω–∞–ª–∞"]), state=Analytics.main)
async def analytics_personal(message: types.Message, state: FSMContext):
    """–õ–æ–≤–ª—é –Ω–∞–∂–∞—Ç–∏–µ –Ω–∞ –∫–Ω–æ–ø–∫—É –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –≤—ã–∑–æ–≤–æ–≤ –ø–µ—Ä—Å–æ–Ω–∞–ª–æ–≤"""
    await message.delete()
    # –ó–∞ —Å–µ–≥–æ–¥–Ω—è
    kwargs = data_preparation()
    start_date = datetime.now().replace(hour=0, minute=0, second=0, microsecond=0)
    end_date = start_date + timedelta(days=1)
    who1 = "–û—Ñ–∏—Ü–∏–∞–Ω—Ç–∞"
    who2 = "–ö–∞–ª—å—è–Ω–Ω–æ–≥–æ –º–∞—Å—Ç–µ—Ä–∞"
    today_count1 = len(await db.get_personal_request_today(personal=who1, start_date=kwargs['start_date'],
                                                           end_date=kwargs['end_date']))
    today_count2 = len(await db.get_personal_request_today(personal=who2, start_date=kwargs['start_date'],
                                                           end_date=kwargs['end_date']))

    text = "<b>–ó–∞ —Å–µ–≥–æ–¥–Ω—è –≤—ã–∑—ã–≤–∞–ª–∏ –ø–µ—Ä—Å–æ–Ω–∞–ª</b>\n"
    text += f"{who1}: {plural_form(today_count1, '—Ä–∞–∑')}\n"
    text += f"{who2}: {plural_form(today_count2, '—Ä–∞–∑')}"

    msg = await message.answer(text=text)

    data = await state.get_data()
    id_msg_list = data['id_msg_list']
    id_msg_list.append(msg.message_id)
    async with state.proxy() as data:
        data['id_msg_list'] = id_msg_list


@dp.message_handler(Text(contains=["–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–π"]), state=Analytics.main)
async def analytics_hall_reservation(message: types.Message, state: FSMContext):
    """–õ–æ–≤–ª—é –Ω–∞–∂–∞—Ç–∏–µ –Ω–∞ –∫–Ω–æ–ø–∫—É –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–π"""
    await message.delete()
    # –ó–∞ —Å–µ–≥–æ–¥–Ω—è
    kwargs = data_preparation()
    today_count = len(await db.get_approved_orders_hall(start_date=kwargs['start_date'], end_date=kwargs['end_date']))

    # –ó–∞ –Ω–µ–¥–µ–ª—é
    week_count = len(
        await db.get_approved_orders_hall(start_date=kwargs['start_date_week'], end_date=kwargs['end_date_week']))

    # –ó–∞ –ø—Ä–µ–¥—ã–¥—É—â–∏–π –º–µ—Å—è—Ü
    month_count = len(
        await db.get_approved_orders_hall(start_date=kwargs['start_date_month'], end_date=kwargs['end_date_month']))

    # –ó–∞ –º–µ—Å—è—Ü
    prev_month_count = len(
        await db.get_approved_orders_hall(start_date=kwargs['start_date_prev_month'].replace(day=1) - timedelta(days=1),
                                          end_date=kwargs['end_date_prev_month']))

    total = len(await db.get_all_approved_orders_hall())

    text = "<b>–ë—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è (–ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–Ω—ã–µ)</b>\n"
    text += f"–ó–∞ —Å–µ–≥–æ–¥–Ω—è: {today_count}\n"
    text += f"–ó–∞ –Ω–µ–¥–µ–ª—é: {week_count}\n"
    text += f"–ó–∞ —Ç–µ–∫—É—â–∏–π –º–µ—Å—è—Ü: {prev_month_count}\n"
    text += f"–ó–∞ –ø—Ä–µ–¥—ã–¥—É—â–∏–π –º–µ—Å—è—Ü: {month_count}\n"
    text += f'{"-" * 50}\n'
    text += f"–í—Å–µ–≥–æ: {total}\n"

    markup = InlineKeyboardMarkup(
        inline_keyboard=[
            [InlineKeyboardButton(text="–ü–æ–∫–∞–∑–∞—Ç—å –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è —Å–¥–µ–ª–∞–Ω–Ω—ã–µ —Å–µ–≥–æ–¥–Ω—è (–≤—Å–µ)", callback_data="a_order_hall")],
            [InlineKeyboardButton(text="–ü–æ–∫–∞–∑–∞—Ç—å –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è –Ω–∞ –¥–∞—Ç—É", callback_data="a_order_hall_data")]
        ]
    )

    msg = await message.answer(text=text, reply_markup=markup)

    data = await state.get_data()
    id_msg_list = data['id_msg_list']
    id_msg_list.append(msg.message_id)
    async with state.proxy() as data:
        data['id_msg_list'] = id_msg_list


@dp.callback_query_handler(text=["a_order_hall_data"], state=Analytics.main)
async def get_order_hall_on_data(call: types.CallbackQuery, state: FSMContext):
    """–ù–∞–∂–∞—Ç–∏–µ –Ω–∞ –∫–Ω–æ–ø–∫—É –ü–æ–∫–∞–∑–∞—Ç—å –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è –Ω–∞ –¥–∞—Ç—É"""
    data = await state.get_data()
    id_msg_list = data['id_msg_list']

    await Analytics.hall_reservation_statistic_data.set()

    date = datetime.now().strftime('%d.%m.%Y')
    text = f"–í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –Ω–∞ –∫–æ—Ç–æ—Ä—É—é –Ω—É–∂–Ω–æ —Å–¥–µ–ª–∞—Ç—å –≤—ã–±–æ—Ä–∫—É, –≤ —Ñ–æ—Ä–º–∞—Ç–µ –î–î.–ú–ú.–ì–ì–ì–ì, —Å–µ–≥–æ–¥–Ω—è {date}"

    msg = await call.message.answer(text=text)
    id_msg_list.append(msg.message_id)

    async with state.proxy() as data:
        data['id_msg_list'] = id_msg_list


@dp.message_handler(content_types=["text"], state=Analytics.hall_reservation_statistic_data)
async def get_orders_on_date(message: types.Message, state: FSMContext):
    """–õ–æ–≤–ª—é –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–∞—Ç—É –≤—ã–±–æ—Ä–∫–∏"""

    try:
        date = message.text.strip()
        if len(date.split('.')) == 3:
            if (len(date.split('.')[0]) == 2) and (len(date.split('.')[1]) == 2) and (len(date.split('.')[2]) == 4):
                orders = await db.get_orders_hall_on_date(date=datetime.strptime(date, "%d.%m.%Y"))

                data = await state.get_data()
                id_msg_list = data['id_msg_list']
                count = 0
                if orders:
                    for order in orders:
                        text = f"–ë—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ —Å—Ç–æ–ª–∏–∫–∞ –Ω–∞ {order['data_reservation']} - {order['time_reservation']}\n"
                        text += f"–ù–æ–º–µ—Ä —Å—Ç–æ–ª–∏–∫–∞: {order['table_number']}\n"
                        text += f"–ó–∞–±—Ä–æ–Ω–∏—Ä–æ–≤–∞–ª @{order['username']}\n"
                        text += f"–ö–æ–ª-–≤–æ —á–µ–ª–æ–≤–µ–∫: {order['number_person']}\n"
                        text += f"–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –∫–ª–∏–µ–Ω—Ç–∞: {order['comment']}\n"
                        text += f"–ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞: {order['phone']}\n"

                        if order['admin_answer'] == "approve":
                            markup = InlineKeyboardMarkup(
                                inline_keyboard=[
                                    [InlineKeyboardButton(text="–û—Ç–º–µ–Ω–∏—Ç—å",
                                                          callback_data=f"aa_hall_cancel-{order['id']}")]
                                ]
                            )
                        elif order['admin_answer'] == None or order['admin_answer'] == 'cancel':
                            markup = InlineKeyboardMarkup(
                                inline_keyboard=[
                                    [
                                        InlineKeyboardButton(text="–í–∑—è—Ç—å –≤ —Ä–∞–±–æ—Ç—É",
                                                             callback_data=f"aa_hall_approve-{order['id']}")
                                    ]
                                ]
                            )

                        msg = await message.answer(text=text, reply_markup=markup)
                        count += 1
                        id_msg_list.append(msg.message_id)
                else:
                    text = "–ù–∞ —É–∫–∞–∑–∞–Ω–Ω—É—é –í–∞–º–∏ –¥–∞—Ç—É –Ω–µ—Ç –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–π"
                    await message.answer(text=text)

                async with state.proxy() as data:
                    data['id_msg_list'] = id_msg_list

                await Analytics.main.set()
            else:
                raise Exception('input error')

        else:
            raise Exception("input error")
    except Exception as _ex:
        text = ""
        if (str(_ex) == 'input error') or (str(_ex) == 'day is out of range for month'):
            text = f"–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é —è –í–∞—Å –Ω–µ –ø–æ–Ω–∏–º–∞—é, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é –¥–∞—Ç—É –≤ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–º —Ñ–æ—Ä–º–∞—Ç–µ –î–î.–ú–ú.–ì–ì–ì–ì. –°–µ–≥–æ–¥–Ω—è {datetime.strftime(datetime.now(), '%d.%m.%Y')}"

        await message.answer(text=text)
        return


@dp.callback_query_handler(text_contains=["a_order_hall"], state=Analytics.main)
async def get_order_hall_made_today(call: types.CallbackQuery, state: FSMContext):
    """–í—ã–±–æ—Ä–∫–∞ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–π —Å—Ç–æ–ª–∏–∫–æ–≤ —Å–¥–µ–ª–∞–Ω–Ω—ã—Ö —Å–µ–≥–æ–¥–Ω—è"""
    orders = await db.get_all_order_hall_made_today(date=datetime.now().date())
    data = await state.get_data()
    id_msg_list = data['id_msg_list']

    for order in orders:
        text = f"–ë—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ —Å—Ç–æ–ª–∏–∫–∞ –Ω–∞ {order['data_reservation']} - {order['time_reservation']}\n"
        text += f"–ù–æ–º–µ—Ä —Å—Ç–æ–ª–∏–∫–∞: {order['table_number']}\n"
        text += f"–ó–∞–±—Ä–æ–Ω–∏—Ä–æ–≤–∞–ª @{order['username']}\n"
        text += f"–ö–æ–ª-–≤–æ —á–µ–ª–æ–≤–µ–∫: {order['number_person']}\n"
        text += f"–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –∫–ª–∏–µ–Ω—Ç–∞: {order['comment']}\n"
        text += f"–ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞: {order['phone']}\n"

        if order['admin_answer'] == "approve":
            markup = InlineKeyboardMarkup(
                inline_keyboard=[
                    [InlineKeyboardButton(text="–û—Ç–º–µ–Ω–∏—Ç—å", callback_data=f"aa_hall_cancel-{order['id']}")]
                ]
            )
        elif order['admin_answer'] == None or order['admin_answer'] == 'cancel':
            markup = InlineKeyboardMarkup(
                inline_keyboard=[
                    [
                        InlineKeyboardButton(text="–í–∑—è—Ç—å –≤ —Ä–∞–±–æ—Ç—É", callback_data=f"aa_hall_approve-{order['id']}")
                    ]
                ]
            )
        msg = await call.message.answer(text=text, reply_markup=markup)
        id_msg_list.append(msg.message_id)

    async with state.proxy() as data:
        data['id_msg_list'] = id_msg_list


@dp.callback_query_handler(text_contains=["aa_hall_cancel"], state=Analytics.main)
async def cancel_order_hall_made_today(call: types.CallbackQuery):
    """–û—Ç–º–µ–Ω–∞ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º"""

    data = call.data.split('-')

    markup = InlineKeyboardMarkup(
        inline_keyboard=[
            [InlineKeyboardButton(text="–í–∑—è—Ç—å –≤ —Ä–∞–±–æ—Ç—É",
                                  callback_data=f"aa_hall_approve-{data[1]}")]
        ]
    )

    await db.update_order_hall_status(id=int(data[1]), order_status=True, admin_answer=data[0].split("_")[-1],
                                      admin_id=str(call.from_user.id), admin_name=call.from_user.username,
                                      table_number=0)
    order = await db.get_order_hall_data(id=int(data[1]))

    text = f"–ë—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ —Å—Ç–æ–ª–∏–∫–∞ –Ω–∞ {order[0]['data_reservation']} - {order[0]['time_reservation']}\n"
    text += f"–ù–æ–º–µ—Ä —Å—Ç–æ–ª–∏–∫–∞: {order[0]['table_number']}\n"
    text += f"–ó–∞–±—Ä–æ–Ω–∏—Ä–æ–≤–∞–ª @{order[0]['username']}\n"
    text += f"–ö–æ–ª-–≤–æ —á–µ–ª–æ–≤–µ–∫: {order[0]['number_person']}\n"
    text += f"–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –∫–ª–∏–µ–Ω—Ç–∞: {order[0]['comment']}\n"
    text += f"–ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞: {order[0]['phone']}\n"

    await call.message.edit_text(text=text)
    await call.message.edit_reply_markup(markup)


@dp.callback_query_handler(text_contains=["aa_hall_approve"], state=Analytics.main)
async def approve_order_hall_made_today(call: types.CallbackQuery, state: FSMContext):
    """–í–∑—è—Ç—å –∑–∞—è–≤–∫—É –Ω–∞ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –≤ —Ä–∞–±–æ—Ç—É –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º"""
    data = call.data.split('-')
    order_id = int(data[1])
    markup = InlineKeyboardMarkup(
        inline_keyboard=[
            [InlineKeyboardButton(text="–û—Ç–º–µ–Ω–∏—Ç—å", callback_data=f"aa_hall_cancel-{data[1]}")]
        ]
    )
    await call.message.edit_reply_markup(markup)

    text = "–í—ã–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä —Å—Ç–æ–ª–∏–∫–∞"
    await call.message.answer(text=text)
    await Analytics.hall_reservation_statistic_table.set()
    async with state.proxy() as data:
        data['order_id'] = order_id
        data['message_id'] = call.message.message_id
        data['markup'] = markup


@dp.message_handler(content_types=["text"], state=Analytics.hall_reservation_statistic_table)
async def get_orders_on_date(message: types.Message, state: FSMContext):
    """–õ–æ–±–≤–ª—é –Ω–æ–º–µ—Ä —Å—Ç–æ–ª–∏–∫–∞ –æ—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞"""
    data = await state.get_data()

    await db.update_order_hall_status(id=int(data['order_id']), order_status=True, admin_answer='approve',
                                      admin_id=str(message.from_user.id), admin_name=message.from_user.username,
                                      table_number=int(message.text))

    order = await db.get_order_hall_data(id=int(data['order_id']))

    text = f"–ë—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ —Å—Ç–æ–ª–∏–∫–∞ –Ω–∞ {order[0]['data_reservation']} - {order[0]['time_reservation']}\n"
    text += f"–ù–æ–º–µ—Ä —Å—Ç–æ–ª–∏–∫–∞: {order[0]['table_number']}\n"
    text += f"–ó–∞–±—Ä–æ–Ω–∏—Ä–æ–≤–∞–ª @{order[0]['username']}\n"
    text += f"–ö–æ–ª-–≤–æ —á–µ–ª–æ–≤–µ–∫: {order[0]['number_person']}\n"
    text += f"–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –∫–ª–∏–µ–Ω—Ç–∞: {order[0]['comment']}\n"
    text += f"–ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞: {order[0]['phone']}\n"

    await bot.edit_message_text(chat_id=message.from_user.id, message_id=int(data['message_id']), text=text)
    await bot.edit_message_reply_markup(chat_id=message.from_user.id, message_id=int(data['message_id']),
                                        reply_markup=data['markup'])

    await bot.send_message(chat_id=message.from_user.id, text="–ó–∞—è–≤–∫–∞ —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω–µ–Ω–∞",
                           reply_to_message_id=int(data['message_id']))
    await Analytics.main.set()


@dp.message_handler(Text(contains=["–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –¥–æ—Å—Ç–∞–≤–∫–∏"]), state=Analytics.main)
async def analytics_shipping(message: types.Message, state: FSMContext):
    """–õ–æ–≤–ª—é –Ω–∞–∂–∞—Ç–∏–µ –Ω–∞ –∫–Ω–æ–ø–∫—É –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –¥–æ—Å—Ç–∞–≤–∫–∏"""
    await message.delete()
    kwargs = data_preparation()
    # –ó–∞ —Å–µ–≥–æ–¥–Ω—è
    today_count = len(await db.get_approved_shipping(start_date=kwargs['start_date'], end_date=kwargs['end_date']))

    # –ó–∞ –Ω–µ–¥–µ–ª—é
    week_count = len(
        await db.get_approved_shipping(start_date=kwargs['start_date_week'], end_date=kwargs['end_date_week']))

    # –ó–∞ –ø—Ä–µ–¥—ã–¥—É—â–∏–π –º–µ—Å—è—Ü
    month_count = len(
        await db.get_approved_shipping(start_date=kwargs['start_date_month'], end_date=kwargs['end_date_month']))

    # –ó–∞ –º–µ—Å—è—Ü
    prev_month_count = len(
        await db.get_approved_shipping(start_date=kwargs['start_date_prev_month'].replace(day=1) - timedelta(days=1),
                                       end_date=kwargs['end_date_prev_month']))

    total = len(await db.get_all_approved_shipping())

    text = "<b>–ó–∞–∫–∞–∑—ã –Ω–∞ –¥–æ—Å—Ç–∞–≤–∫—É (–ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–Ω—ã–µ)</b>\n"
    text += f"–ó–∞ —Å–µ–≥–æ–¥–Ω—è: {today_count}\n"
    text += f"–ó–∞ –Ω–µ–¥–µ–ª—é: {week_count}\n"
    text += f"–ó–∞ —Ç–µ–∫—É—â–∏–π –º–µ—Å—è—Ü: {prev_month_count}\n"
    text += f"–ó–∞ –ø—Ä–µ–¥—ã–¥—É—â–∏–π –º–µ—Å—è—Ü: {month_count}\n"
    text += f'{"-" * 50}\n'
    text += f"–í—Å–µ–≥–æ: {total}\n"

    markup = InlineKeyboardMarkup(
        inline_keyboard=[
            [InlineKeyboardButton(text="–í—ã–≥—Ä—É–∑–∏—Ç—å –≤ Excel", callback_data="a_sh_excel")],
            [InlineKeyboardButton(text="–ü–æ–∫–∞–∑–∞—Ç—å –∑–∞—è–≤–∫–∏ —Å–¥–µ–ª–∞–Ω–Ω—ã–µ —Å–µ–≥–æ–¥–Ω—è (–≤—Å–µ)", callback_data="a_sh_order")]
        ]
    )

    msg = await message.answer(text=text, reply_markup=markup)

    data = await state.get_data()
    id_msg_list = data['id_msg_list']
    id_msg_list.append(msg.message_id)
    async with state.proxy() as data:
        data['id_msg_list'] = id_msg_list


@dp.callback_query_handler(text=["a_shipping_excel"], state=Analytics.main)
async def export_shipping_to_excel(call: types.CallbackQuery, state: FSMContext):
    """–í—ã–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö –ø–æ –¥–æ—Å—Ç–∞–≤–∫–µ –≤ Excell"""
    kwargs = data_preparation()
    # –ó–∞ —Å–µ–≥–æ–¥–Ω—è
    today = await db.get_approved_shipping(start_date=kwargs['start_date'], end_date=kwargs['end_date'])
    # –ó–∞ –Ω–µ–¥–µ–ª—é
    week = await db.get_approved_shipping(start_date=kwargs['start_date_week'], end_date=kwargs['end_date_week'])
    # –ó–∞ –º–µ—Å—è—Ü
    month = await db.get_approved_shipping(
        start_date=kwargs['start_date_prev_month'].replace(day=1) - timedelta(days=1),
        end_date=kwargs['end_date_prev_month'])
    # –ó–∞ –ø—Ä–µ–¥—ã–¥—É—â–∏–π –º–µ—Å—è—Ü
    prev_month = await db.get_approved_shipping(start_date=kwargs['start_date_month'],
                                                end_date=kwargs['end_date_month'])

    # "start_date": start_date,
    # "end_date": end_date,
    # "start_date_week": start_date_week,
    # "end_date_week": end_date_week,
    # "start_date_month": start_date_month,
    # "end_date_month": end_date_month,
    # "start_date_prev_month": start_date_prev_month,
    # "end_date_prev_month": end_date_prev_month

    book = openpyxl.Workbook()
    book.remove(book.active)
    book.create_sheet(f"–ó–∞ —Å–µ–≥–æ–¥–Ω—è")
    book.create_sheet(f"–ó–∞ –Ω–µ–¥–µ–ª—é")
    book.create_sheet(f"–ó–∞ –º–µ—Å—è—Ü")
    book.create_sheet(f"–ó–∞ –ø—Ä–µ–¥—ã–¥—É—â–∏–π –º–µ—Å—è—Ü")

    for sheet in book.worksheets:
        if sheet.title == "–ó–∞ —Å–µ–≥–æ–¥–Ω—è":
            sheet.cell(row=1, column=1).value = '–ó–∞–µ–ë–ê–õ!!!'
        else:
            sheet.cell(row=1, column=1).value = "–ù–µ –ü–ò–ó–î–ò!!!"

    book.save("shipping.xlsx")
    book.close()

    with open("shipping.xlsx", 'rb') as file:
        wb = openpyxl.load_workbook(file)
        ws = wb.active
        output = BytesIO()
        wb.save(output)
        output.seek(0)

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–∞–π–ª –≤ —Å–æ–æ–±—â–µ–Ω–∏–∏
        xls_file = types.InputFile(output, filename="shipping.xlsx")

        await bot.send_document(chat_id=call.message.chat.id, document=xls_file, caption="–í—ã–≥—Ä—É–∑–∫–∞-–î–æ—Å—Ç–∞–≤–∫–∞")


@dp.callback_query_handler(text=["a_sh_order"], state=Analytics.main)
async def get_shipping_order_made_today(call: types.CallbackQuery, state: FSMContext):
    """–í—ã–±–æ—Ä–∫–∞ –∑–∞—è–≤–æ–∫ –Ω–∞ –¥–æ—Å—Ç–∞–≤–∫—É —Å–¥–µ–ª–∞–Ω–Ω—ã—Ö —Å–µ–≥–æ–¥–Ω—è"""
    orders = await db.get_shipping_order_made_today(date=datetime.now().date())
    data = await state.get_data()
    id_msg_list = data['id_msg_list']
    if orders:
        for item in orders:
            text = f"–ó–∞—è–≤–∫–∞ –Ω–∞ {item['data_reservation']} {item['time_reservation']}\n"
            text += f"–æ—Ç @{item['user_name']}\n"
            text += f"–ê–¥—Ä–µ—Å: {item['address']}\n"
            text += f"–¢–µ–ª–æ—Ñ–æ–Ω: {item['phone']}\n"
            text += f"–ö–æ–ª-–≤–æ –ø—Ä–∏–±–æ—Ä–æ–≤: {item['number_of_devices']}\n"
            text += f"{'-' * 50}\n"
            data = json.loads(item['tpc'])
            for title in data:
                text += f"{title['title']} - {title['count']}\n"
            text += f'{"-" * 50}\n'
            text += f"–ò—Ç–æ–≥–æ: {item['final_summa']} —Ç–µ–Ω–≥–µ"
            if item['admin_answer'] == "approve":
                markup = InlineKeyboardMarkup(
                    inline_keyboard=[
                        [InlineKeyboardButton(text="–û—Ç–º–µ–Ω–∏—Ç—å", callback_data=f"aa_sh_cancel-{item['id']}")]
                    ]
                )
            elif item['admin_answer'] == 'cancel':
                markup = InlineKeyboardMarkup(
                    inline_keyboard=[
                        [
                            InlineKeyboardButton(text="–í–∑—è—Ç—å –≤ —Ä–∞–±–æ—Ç—É", callback_data=f"aa_sh_approve-{item['id']}")
                        ]
                    ]
                )
            msg = await call.message.answer(text=text, reply_markup=markup)
            id_msg_list.append(msg.message_id)
    else:
        await call.message.answer(text="–°–µ–≥–æ–¥–Ω—è –µ—â–µ –Ω–µ –±—ã–ª–æ –∑–∞–∫–∞–∑–æ–≤ –Ω–∞ –¥–æ—Å—Ç–∞–≤–∫—É")
    async with state.proxy() as data:
        data['id_msg_list'] = id_msg_list


@dp.callback_query_handler(text_contains=["aa_sh_"], state=Analytics.main)
async def approve_shipping_order_made_today(call: types.CallbackQuery, state: FSMContext):
    """–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ/–û—Ç–º–µ–Ω–∞ –∑–∞—è–≤–∫–∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º"""
    username = re.findall(r'@(\w+)', call.message.html_text)[0]
    user = await db.get_user_by_username(username=username)

    data = call.data.split('-')
    if 'approve' in data[0]:
        markup = InlineKeyboardMarkup(
            inline_keyboard=[
                [InlineKeyboardButton(text="–û—Ç–º–µ–Ω–∏—Ç—å", callback_data=f"aa_sh_cancel-{data[1]}")]
            ]
        )

        await bot.send_message(chat_id=int(user[0]['user_id']),
                               text=f'–í–∞—à–∞ –∑–∞—è–≤–∫–∞ –Ω–∞ –¥–æ—Å—Ç–∞–≤–∫—É –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ü–∏–µ–π.\n\n{call.message.text}')

    elif 'cancel' in data[0]:
        markup = InlineKeyboardMarkup(
            inline_keyboard=[
                [
                    InlineKeyboardButton(text="–í–∑—è—Ç—å –≤ —Ä–∞–±–æ—Ç—É", callback_data=f"aa_sh_approve-{data[1]}")
                ]
            ]
        )

        await bot.send_message(chat_id=int(user[0]['user_id']),
                               text=f'–í–∞—à–∞ –∑–∞—è–≤–∫–∞ –Ω–∞ –¥–æ—Å—Ç–∞–≤–∫—É –æ—Ç–∫–ª–æ–Ω–µ–Ω–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ü–∏–µ–π.\n\n{call.message.text}')

    await call.message.edit_reply_markup(markup)
    await db.update_shipping_order_status(id=int(data[1]), admin_name=call.from_user.username,
                                          admin_id=str(call.from_user.id), admin_answer=data[0].split("_")[-1])


@dp.message_handler(Text(contains=["–£—á–∞—Å—Ç–Ω–∏–∫–∏ –ø—Ä–æ–≥—Ä–∞–º–º—ã –ª–æ—è–ª—å–Ω–æ—Å—Ç–∏"]), state=Analytics.main)
async def analytics_loyal_program_participants(message: types.Message, state: FSMContext):
    """–õ–æ–≤–ª—é –Ω–∞–∂–∞—Ç–∏–µ –Ω–∞ –∫–Ω–æ–ø–∫—É –£—á–∞—Å—Ç–Ω–∏–∫–∏ –ø—Ä–æ–≥—Ä–∞–º–º—ã –ª–æ—è–ª—å–Ω–æ—Å—Ç–∏"""
    await message.delete()
    loyal_program_participants_info = await db.get_loyal_program_participants()
    markup = InlineKeyboardMarkup()
    for user_info in loyal_program_participants_info:
        markup.add(
            InlineKeyboardButton(text=user_info["username"],
                                 callback_data=f"{user_info['user_id']}-user_info")
        )
    msg = await message.answer(text="–£—á–∞—Å—Ç–Ω–∏–∫–∏ –ø—Ä–æ–≥—Ä–∞–º–º—ã –ª–æ—è–ª—å–Ω–æ—Å—Ç–∏", reply_markup=markup)

    data = await state.get_data()
    id_msg_list = data['id_msg_list']
    id_msg_list.append(msg.message_id)

    async with state.proxy() as data:
        data['id_msg_list'] = id_msg_list
        data["markup"] = markup


@dp.callback_query_handler(text_contains=["user_info"], state=Analytics.main)
async def show_user_info(call: types.CallbackQuery, state: FSMContext):
    """–ü–æ–∫–∞–∑–∞—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ"""
    await bot.answer_callback_query(call.id, text="–ü—Ä–∏–≤–µ—Ç, —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ alert!", show_alert=True)
    callback_data = call.data.split('-')
    data = await state.get_data()
    user_info = await db.get_user_info(user_id=callback_data[0])
    all_invited_users = await db.get_all_invited_users(user_info[0]["referral_id"])

    count_users = len(all_invited_users)
    created_at = user_info[0]['created_at']

    text = f"–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏ –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ @{user_info[0]['username']}\n\n"
    text += f"–î–∞—Ç–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏: {datetime.strftime(created_at, '%Y-%m-%d')}\n"
    text += f"–§–∞–º–∏–ª–∏—è –∏ –ò–º—è: {user_info[0]['card_fio']}\n"
    text += f"–ù–æ–º–µ—Ä –∫–∞—Ä—Ç—ã: {user_info[0]['card_number']}\n"
    text += f"–î–∞—Ç–∞ —Ä–æ–∂–¥–µ–Ω–∏—è: {user_info[0]['birthday']}\n"
    text += f"–ü—Ä–∏—à–ª–æ –∫ –Ω–∞–º –ø–æ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏: {plural_form(count_users, '—á–µ–ª–æ–≤–µ–∫')}\n"
    text += f"–ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞: {user_info[0]['card_phone']}\n"
    text += f"{'-' * 50}\n"
    text += f"–ë–∞–Ω –°—Ç–∞—Ç—É—Å: {'<b>–ó–∞–±–∞–Ω–µ–Ω</b>' if user_info[0]['ban_status'] == True else '–ß–∏—Å—Ç'}\n"
    if user_info[0]["ban_status"] == True:
        text += f"–ü—Ä–∏—á–∏–Ω–∞ –±–∞–Ω–∞: {user_info[0]['reason_for_ban']}"

    msg = await call.message.edit_text(text=text)
    await call.message.edit_reply_markup(data["markup"])

    data = await state.get_data()
    id_msg_list = data['id_msg_list']
    id_msg_list.append(msg.message_id)

    async with state.proxy() as data:
        data['id_msg_list'] = id_msg_list
