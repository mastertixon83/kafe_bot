# TODO: —Å–º–æ—Ç—Ä–µ—Ç—å –∑–∞—è–≤–∫–∏ –Ω–∞ –¥–æ—Å—Ç–∞–≤–∫—É, –∫–æ—Ç–æ—Ä—ã–µ –±—ã–ª–∏ —Å–æ–∑–¥–∞–Ω—ã —Å–µ–≥–æ–¥–Ω—è
# TODO: —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –∑–∞–±—Ä–∞–Ω—ã–º –ø—Ä–∏–∑–∞–º
# TODO: –û—Ç–ø—Ä–∞–≤–∏—Ç Excel —Ñ–∞–π–ª
from datetime import datetime, timezone, timedelta
import csv

from aiogram.dispatcher import FSMContext

from loader import dp, bot, db
from aiogram import types

from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton, ReplyKeyboardRemove
from keyboards.default.menu import menuAdmin, newsletter_kbd, analytics_kbd
from states.analytics import Analytics
from utils.db_api.db_commands import DBCommands

from aiogram.dispatcher.filters import Text
from data.config import admins
import logging

db = DBCommands()

logging.basicConfig(format=u'%(filename)s [LINE:%(lineno)d] #%(levelname)-8s [%(asctime)s] %(message)s',
                    level=logging.INFO)


def plural_form(n, word):
    """–û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–≥–æ –Ω–∞–ø–∏—Å–∞–Ω–∏—è —Ñ–æ—Ä–º—ã —Å–ª–æ–≤–∞"""
    if 2 <= n % 10 <= 4 and (n % 100 < 10 or n % 100 >= 20):
        return f"{n} {word}–∞"
    else:
        return f"{n} {word}"


def data_preparation():
    """–ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –¥–∞—Ç –¥–ª—è –∑–∞–ø—Ä–æ—Å–∞"""
    # –ó–∞ —Å–µ–≥–æ–¥–Ω—è
    start_date = datetime.now().replace(hour=0, minute=0, second=0, microsecond=0)
    end_date = start_date + timedelta(days=1)

    # –ó–∞ –Ω–µ–¥–µ–ª—é
    today_week = datetime.now().replace(hour=0, minute=0, second=0, microsecond=0)
    start_date_week = today_week - timedelta(days=today_week.weekday() + 4)
    end_date_week = start_date_week + timedelta(days=7)

    # –ó–∞ –ø—Ä–µ–¥—ã–¥—É—â–∏–π –º–µ—Å—è—Ü
    today_month = datetime.now().replace(day=1, hour=0, minute=0, second=0, microsecond=0)
    start_date_month = (today_month - timedelta(days=1)).replace(day=1)
    end_date_month = today_month

    # –ó–∞ –º–µ—Å—è—Ü
    today_prev_month = datetime.now().replace(hour=0, minute=0, second=0, microsecond=0)
    start_date_prev_month = today_prev_month.replace(day=1)
    end_date_prev_month = today_prev_month + timedelta(days=1)

    return {
        "start_date": start_date,
        "end_date": end_date,
        "start_date_week": start_date_week,
        "end_date_week": end_date_week,
        "start_date_month": start_date_month,
        "end_date_month": end_date_month,
        "start_date_prev_month": start_date_prev_month,
        "end_date_prev_month": end_date_prev_month
    }


@dp.callback_query_handler(text=["excel_users"], state=Analytics.main)
async def download_users_to_excel(call: types.CallbackQuery, state: FSMContext):
    """–í—ã–≥—Ä—É–∑–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤ Excel —Ñ–∞–π–ª"""
    all_users_info = await db.get_all_users()
    curr_dt = datetime.now().strftime("%d_%m_%Y %H:%M")
    result = []
    for user in all_users_info:
        created_at = user["created_at"]
        user_id = user["user_id"]
        username = user["username"]
        full_name = user["full_name"]
        gender = user["gender"]
        employment = user["employment"]
        referral = user["referral"]
        referral_id = user["referral_id"]
        card_fio = user["card_fio"]
        card_phone = user["card_phone"]
        card_number = user["card_number"]
        card_status = user["card_status"]
        birthday = user["birthday"]
        prize = user["prize"]
        balance = user["balance"]
        administrator = "–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä" if user["administrator"] == True else None
        director = "–î–∏—Ä–µ–∫—Ç–æ—Ä" if user["director"] == True else None
        ban_status = "–ó–∞–±–∞–Ω–µ–Ω" if user["ban_status"] == True else None
        reason_for_ban = user["reason_for_ban"]

        result.append(
            [created_at, user_id, username, full_name, gender, employment, referral, referral_id, card_fio,
             card_phone, card_number, card_status, birthday, prize, balance, administrator, director, ban_status,
             reason_for_ban]
        )

    with open(f"result_{curr_dt}.csv", "a") as file:
        writer = csv.writer(file)

        writer.writerow(
            (
                "–î–∞—Ç–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏",
                "User_id",
                "Username",
                "Full_name",
                "–ü–æ–ª",
                "–í–∏–¥ –∑–∞–Ω—è—Ç–æ—Å—Ç–∏",
                "Referral",
                "Referral_id",
                "–§–∞–º–∏–ª–∏—è –ò–º—è –Ω–∞ –∫–∞—Ä—Ç–µ",
                "–ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞",
                "–ù–æ–º–µ—Ä –∫–∞—Ä—Ç—ã",
                "–°—Ç–∞—Ç—É—Å –∫–∞—Ä—Ç—ã",
                "–î–µ–Ω—å —Ä–æ–∂–¥–µ–Ω–∏—è",
                "–ü—Ä–∏–∑–æ–≤—ã–µ –∫–æ–¥—ã",
                "–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–æ –ø—Ä–∏–∑–æ–≤—ã—Ö –∫–æ–¥–æ–≤",
                "–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä",
                "–î–∏—Ä–µ–∫—Ç–æ—Ä",
                "–°—Ç–∞—Ç—É—Å –±–∞–Ω–∞",
                "–ü—Ä–∏—á–∏–Ω–∞ –±–∞–Ω–∞",
            )
        )

        writer.writerows(result)


@dp.message_handler(Text(contains=["–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏"]), state=Analytics.main)
async def analytics_users(message: types.Message, state: FSMContext):
    """–õ–æ–≤–ª—é –Ω–∞–∂–∞—Ç–∏–µ –Ω–∞ –∫–Ω–æ–ø–∫—É –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏"""
    await message.delete()
    users_nb_info = await db.get_all_nb_users()
    all_users_info = await db.get_all_users()

    text = f"–ê–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {len(users_nb_info)}\n–í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {len(all_users_info)}"
    markup = InlineKeyboardMarkup()
    markup.add(
        InlineKeyboardButton(text="–í—ã–≥—Ä—É–∑–∏—Ç—å Excel —Ñ–∞–π–ª", callback_data="excel_users")
    )
    msg = await message.answer(text=text, reply_markup=markup)

    data = await state.get_data()
    id_msg_list = data['id_msg_list']
    id_msg_list.append(msg.message_id)
    async with state.proxy() as data:
        data['id_msg_list'] = id_msg_list


@dp.message_handler(Text(contains=["–†–∞—Å—Å—ã–ª–∫–∏"]), state=Analytics.main)
async def analytics_mailings(message: types.Message, state: FSMContext):
    """–õ–æ–≤–ª—é –Ω–∞–∂–∞—Ç–∏–µ –Ω–∞ –∫–Ω–æ–ø–∫—É –§–æ—Ä–º—ã —Ä–∞—Å—Å—ã–ª–æ–∫-–∞–Ω–∫–µ—Ç"""
    await message.delete()
    total = 0
    type_mailing_list = ["standard", "birthday", "hall_reservation", "shipping", "loyal_card"]
    type_mailing_dict = {
        "standard": "üì® –û–±—ã—á–Ω–∞—è —Ä–∞—Å—Å—ã–ª–∫–∞",
        "birthday": "üéÅ –ü—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –¥–ª—è –∏–º–µ–Ω–∏–Ω–Ω–∏–∫–æ–≤",
        "hall_reservation": "üçΩ –ü—Ä–∏–∑—ã–≤ –∫ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—é",
        "shipping": "üöö –ó–∞–∫–∞–∂–∏—Ç–µ –¥–æ—Å—Ç–∞–≤–∫—É",
        "loyal_card": "üí≥ –í–ª–∞–¥–µ–ª—å—Ü–∞–º –∫–∞—Ä—Ç –ª–æ—è–ª—å–Ω–æ—Å—Ç–∏"}
    text = ""
    kwargs = data_preparation()
    for item in type_mailing_list:
        # –ó–∞ —Å–µ–≥–æ–¥–Ω—è
        today_count = len(
            await db.get_tasks_mailing(type_mailing=item, start_date=kwargs['start_date'], end_date=kwargs['end_date']))
        # –ó–∞ –Ω–µ–¥–µ–ª—é
        week_count = len(
            await db.get_tasks_mailing(type_mailing=item, start_date=kwargs['start_date_week'], end_date=kwargs['end_date_week']))
        # –ó–∞ –ø—Ä–µ–¥—ã–¥—É—â–∏–π –º–µ—Å—è—Ü
        month_count = len(
            await db.get_tasks_mailing(type_mailing=item, start_date=kwargs['start_date_month'], end_date=kwargs['end_date_month']))
        # –ó–∞ –º–µ—Å—è—Ü
        prev_month_count = len(
            await db.get_tasks_mailing(type_mailing=item,
                                       start_date=kwargs['start_date_prev_month'].replace(day=1) - timedelta(days=1),
                                       end_date=kwargs['end_date_prev_month']))

        text += f"<b>{type_mailing_dict[item]}</b>\n"
        text += f" –ó–∞ —Å–µ–≥–æ–¥–Ω—è: {today_count}\n"
        text += f" –ó–∞ –Ω–µ–¥–µ–ª—é: {week_count}\n"
        text += f" –ó–∞ —Ç–µ–∫—É—â–∏–π –º–µ—Å—è—Ü: {prev_month_count}\n"
        text += f" –ó–∞ –ø—Ä–µ–¥—ã–¥—É—â–∏–π –º–µ—Å—è—Ü: {month_count}\n"
        text += "-" * 80 + "\n"

    msg = await message.answer(text=text)

    data = await state.get_data()
    id_msg_list = data['id_msg_list']
    id_msg_list.append(msg.message_id)
    async with state.proxy() as data:
        data['id_msg_list'] = id_msg_list


@dp.message_handler(Text(contains=["–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –≤—ã–∑–æ–≤–æ–≤–∞ –ø–µ—Ä—Å–æ–Ω–∞–ª–∞"]), state=Analytics.main)
async def analytics_personal(message: types.Message, state: FSMContext):
    """–õ–æ–≤–ª—é –Ω–∞–∂–∞—Ç–∏–µ –Ω–∞ –∫–Ω–æ–ø–∫—É –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –≤—ã–∑–æ–≤–æ–≤ –ø–µ—Ä—Å–æ–Ω–∞–ª–æ–≤"""
    await message.delete()
    # –ó–∞ —Å–µ–≥–æ–¥–Ω—è
    kwargs = data_preparation()
    start_date = datetime.now().replace(hour=0, minute=0, second=0, microsecond=0)
    end_date = start_date + timedelta(days=1)
    who1 = "–û—Ñ–∏—Ü–∏–∞–Ω—Ç–∞"
    who2 = "–ö–∞–ª—å—è–Ω–Ω–æ–≥–æ –º–∞—Å—Ç–µ—Ä–∞"
    today_count1 = len(await db.get_personal_request_today(personal=who1, start_date=kwargs['start_date'], end_date=kwargs['end_date']))
    today_count2 = len(await db.get_personal_request_today(personal=who2, start_date=kwargs['start_date'], end_date=kwargs['end_date']))

    text = "<b>–ó–∞ —Å–µ–≥–æ–¥–Ω—è –≤—ã–∑—ã–≤–∞–ª–∏ –ø–µ—Ä—Å–æ–Ω–∞–ª</b>\n"
    text += f"{who1}: {plural_form(today_count1, '—Ä–∞–∑')}\n"
    text += f"{who2}: {plural_form(today_count2, '—Ä–∞–∑')}"

    msg = await message.answer(text=text)

    data = await state.get_data()
    id_msg_list = data['id_msg_list']
    id_msg_list.append(msg.message_id)
    async with state.proxy() as data:
        data['id_msg_list'] = id_msg_list


@dp.message_handler(Text(contains=["–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–π"]), state=Analytics.main)
async def analytics_hall_reservation(message: types.Message, state: FSMContext):
    """–õ–æ–≤–ª—é –Ω–∞–∂–∞—Ç–∏–µ –Ω–∞ –∫–Ω–æ–ø–∫—É –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–π"""
    await message.delete()
    # –ó–∞ —Å–µ–≥–æ–¥–Ω—è
    kwargs = data_preparation()
    today_count = len(await db.get_approved_orders_hall(start_date=kwargs['start_date'], end_date=kwargs['end_date']))

    # –ó–∞ –Ω–µ–¥–µ–ª—é
    week_count = len(await db.get_approved_orders_hall(start_date=kwargs['start_date_week'], end_date=kwargs['end_date_week']))

    # –ó–∞ –ø—Ä–µ–¥—ã–¥—É—â–∏–π –º–µ—Å—è—Ü
    month_count = len(await db.get_approved_orders_hall(start_date=kwargs['start_date_month'], end_date=kwargs['end_date_month']))

    # –ó–∞ –º–µ—Å—è—Ü
    prev_month_count = len(
        await db.get_approved_orders_hall(start_date=kwargs['start_date_prev_month'].replace(day=1) - timedelta(days=1),
                                          end_date=kwargs['end_date_prev_month']))

    total = len(await db.get_all_approved_orders_hall())

    text = "<b>–ë—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è (–ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–Ω—ã–µ)</b>\n"
    text += f"–ó–∞ —Å–µ–≥–æ–¥–Ω—è: {today_count}\n"
    text += f"–ó–∞ –Ω–µ–¥–µ–ª—é: {week_count}\n"
    text += f"–ó–∞ —Ç–µ–∫—É—â–∏–π –º–µ—Å—è—Ü: {prev_month_count}\n"
    text += f"–ó–∞ –ø—Ä–µ–¥—ã–¥—É—â–∏–π –º–µ—Å—è—Ü: {month_count}\n"
    text += "-" * 80
    text += f"–í—Å–µ–≥–æ: {total}\n"

    msg = await message.answer(text=text)

    data = await state.get_data()
    id_msg_list = data['id_msg_list']
    id_msg_list.append(msg.message_id)
    async with state.proxy() as data:
        data['id_msg_list'] = id_msg_list


@dp.message_handler(Text(contains=["–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –¥–æ—Å—Ç–∞–≤–∫–∏"]), state=Analytics.main)
async def analytics_shipping(message: types.Message, state: FSMContext):
    """–õ–æ–≤–ª—é –Ω–∞–∂–∞—Ç–∏–µ –Ω–∞ –∫–Ω–æ–ø–∫—É –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –¥–æ—Å—Ç–∞–≤–∫–∏"""
    await message.delete()
    kwargs = data_preparation()
    # –ó–∞ —Å–µ–≥–æ–¥–Ω—è
    today_count = len(await db.get_approved_shipping(start_date=kwargs['start_date'], end_date=kwargs['end_date']))

    # –ó–∞ –Ω–µ–¥–µ–ª—é
    week_count = len(await db.get_approved_shipping(start_date=kwargs['start_date_week'], end_date=kwargs['end_date_week']))

    # –ó–∞ –ø—Ä–µ–¥—ã–¥—É—â–∏–π –º–µ—Å—è—Ü
    month_count = len(await db.get_approved_shipping(start_date=kwargs['start_date_month'], end_date=kwargs['end_date_month']))

    # –ó–∞ –º–µ—Å—è—Ü
    prev_month_count = len(
        await db.get_approved_shipping(start_date=kwargs['start_date_prev_month'].replace(day=1) - timedelta(days=1),
                                       end_date=kwargs['end_date_prev_month']))

    total = len(await db.get_all_approved_shipping())

    text = "<b>–ó–∞–∫–∞–∑—ã –Ω–∞ –¥–æ—Å—Ç–∞–≤–∫—É (–ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–Ω—ã–µ)</b>\n"
    text += f"–ó–∞ —Å–µ–≥–æ–¥–Ω—è: {today_count}\n"
    text += f"–ó–∞ –Ω–µ–¥–µ–ª—é: {week_count}\n"
    text += f"–ó–∞ —Ç–µ–∫—É—â–∏–π –º–µ—Å—è—Ü: {prev_month_count}\n"
    text += f"–ó–∞ –ø—Ä–µ–¥—ã–¥—É—â–∏–π –º–µ—Å—è—Ü: {month_count}\n"
    text += "-" * 80
    text += f"–í—Å–µ–≥–æ: {total}\n"

    msg = await message.answer(text=text)

    data = await state.get_data()
    id_msg_list = data['id_msg_list']
    id_msg_list.append(msg.message_id)
    async with state.proxy() as data:
        data['id_msg_list'] = id_msg_list


@dp.message_handler(Text(contains=["–£—á–∞—Å—Ç–Ω–∏–∫–∏ –ø—Ä–æ–≥—Ä–∞–º–º—ã –ª–æ—è–ª—å–Ω–æ—Å—Ç–∏"]), state=Analytics.main)
async def analytics_loyal_program_participants(message: types.Message, state: FSMContext):
    """–õ–æ–≤–ª—é –Ω–∞–∂–∞—Ç–∏–µ –Ω–∞ –∫–Ω–æ–ø–∫—É –£—á–∞—Å—Ç–Ω–∏–∫–∏ –ø—Ä–æ–≥—Ä–∞–º–º—ã –ª–æ—è–ª—å–Ω–æ—Å—Ç–∏"""
    await message.delete()
    loyal_program_participants_info = await db.get_loyal_program_participants()
    markup = InlineKeyboardMarkup()
    for user_info in loyal_program_participants_info:
        markup.add(
            InlineKeyboardButton(text=user_info["username"],
                                 callback_data=f"{user_info['user_id']}-user_info")
        )
    msg = await message.answer(text="–£—á–∞—Å—Ç–Ω–∏–∫–∏ –ø—Ä–æ–≥—Ä–∞–º–º—ã –ª–æ—è–ª—å–Ω–æ—Å—Ç–∏", reply_markup=markup)

    data = await state.get_data()
    id_msg_list = data['id_msg_list']
    id_msg_list.append(msg.message_id)

    async with state.proxy() as data:
        data['id_msg_list'] = id_msg_list
        data["markup"] = markup


@dp.callback_query_handler(text_contains=["user_info"], state=Analytics.main)
async def show_user_info(call: types.CallbackQuery, state: FSMContext):
    """–ü–æ–∫–∞–∑–∞—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ"""
    callback_data = call.data.split('-')
    data = await state.get_data()
    user_info = await db.get_user_info(user_id=callback_data[0])
    all_invited_users = await db.get_all_invited_users(user_info[0]["referral_id"])

    count_users = len(all_invited_users)
    created_at = user_info[0]['created_at']

    text = f"–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏ –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ @{user_info[0]['username']}\n\n"
    text += f"–î–∞—Ç–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏: {datetime.strftime(created_at, '%Y-%m-%d')}\n"
    text += f"–§–∞–º–∏–ª–∏—è –∏ –ò–º—è: {user_info[0]['card_fio']}\n"
    text += f"–ù–æ–º–µ—Ä –∫–∞—Ä—Ç—ã: {user_info[0]['card_number']}\n"
    text += f"–î–∞—Ç–∞ —Ä–æ–∂–¥–µ–Ω–∏—è: {user_info[0]['birthday']}\n"
    text += f"–ü—Ä–∏—à–ª–æ –∫ –Ω–∞–º –ø–æ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏: {plural_form(count_users, '—á–µ–ª–æ–≤–µ–∫')}\n"
    text += f"–ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞: {user_info[0]['card_phone']}\n"

    msg = await call.message.edit_text(text=text)
    await call.message.edit_reply_markup(data["markup"])

    data = await state.get_data()
    id_msg_list = data['id_msg_list']
    id_msg_list.append(msg.message_id)

    async with state.proxy() as data:
        data['id_msg_list'] = id_msg_list
