import re
from typing import Union
from aiogram import types
from aiogram.dispatcher import FSMContext
from aiogram.dispatcher.filters import Text
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton, ReplyKeyboardRemove
from datetime import datetime, timezone

from data.config import admins
from keyboards.inline import user_inline_approve
from states.shipping import Shipping

from keyboards.default import cancel_btn, menuAdmin, send_phone_cancel, menuUser
from keyboards.inline.inline_user_order_shipping import categories_keyboard, menu_cd, \
    items_in_category_keyboard, make_callback_data

from loader import dp, bot
from states.config import MainMenu
from utils.db_api.db_commands import DBCommands

db = DBCommands()


@dp.message_handler(Text(contains="–û—Ñ–æ—Ä–º–∏—Ç—å –∑–∞–∫–∞–∑ –Ω–∞ –¥–æ—Å—Ç–∞–≤–∫—É"), state=None)
async def show_menu_order_shipping(message: types.Message, state: FSMContext):
    await message.delete()
    await db.delete_cart(str(message.chat.id))
    await message.answer('–û—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ –∑–∞–∫–∞–∑–∞ –Ω–∞ –¥–æ—Å—Ç–∞–≤–∫—É', reply_markup=ReplyKeyboardRemove())
    await build_category_keyboard(message)

    async with state.proxy() as data:
        data["message_id"] = message.message_id + 2
        data["chat_id"] = message.from_user.id


###–õ–æ–≤–ª—é –Ω–∞–∂–∞—Ç–∏–µ –ª—é–±–æ–π –∏–Ω–ª–∞–π–Ω –∫–Ω–æ–ø–∫–∏
@dp.callback_query_handler(menu_cd.filter(), state="*")
async def navigate(call: types.CallbackQuery, callback_data: dict, state: FSMContext):
    current_level = callback_data.get('level')
    category_id = callback_data.get('category_id')
    item_id = callback_data.get('item_id')
    action = callback_data.get('action')
    what = callback_data.get('what'),
    minus = callback_data.get('minus'),
    count = callback_data.get('count'),
    plus = callback_data.get('plus'),
    st = state

    levels = {
        "-1": main_menu,
        # "0": what_to_edit,
        "1": build_category_keyboard,
        "2": build_item_cards,
        "3": delivery_registration,
        # "12": new_category,
        # "13": delete_category,
        # "14": edit_position_category,
        # "22": new_item,
        # "23": delete_item,
        "221": add_order_item,
        "222": del_order_item
    }

    current_level_functions = levels[current_level]
    await current_level_functions(
        call,
        category_id=category_id,
        item_id=item_id,
        action=action,
        what=what,
        minus=minus,
        count=count,
        plus=plus,
        state=st
    )


### –õ–æ–≤–ª—é –Ω–∞–∂–∞—Ç–∏–µ –∫–Ω–æ–ø–∫–∏ –≤—ã—Ö–æ–¥
async def main_menu(callback: types.CallbackQuery, what, state, **kwargs):
    await callback.message.delete()
    await callback.message.answer(text="–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", reply_markup=menuAdmin)
    user_id = callback.message.chat.id
    await db.delete_cart(user_id=str(user_id))
    await state.finish()


### –ü–æ—Å—Ç—Ä–æ–µ–Ω–∏–µ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –∫–∞—Ç–µ–≥–æ—Ä–∏–π, –ø–æ—Å–ª–µ –Ω–∞–∂–∞—Ç–∏—è –Ω–∞ –∫–Ω–æ–ø–∫—É –û—Ñ–æ—Ä–º–∏—Ç—å –∑–∞–∫–∞–∑ –Ω–∞ –¥–æ—Å—Ç–∞–≤–∫—É
async def build_category_keyboard(message: Union[types.Message, types.CallbackQuery], **kwargs):
    markup = await categories_keyboard()
    if kwargs:
        data = await kwargs['state'].get_data()
        for msg_id in data['message_id_list']:
            await bot.delete_message(chat_id=message.from_user.id, message_id=msg_id)

    if isinstance(message, types.Message):
        await message.answer("–ß—Ç–æ –±—É–¥–µ—à—å –∑–∞–∫–∞–∑—ã–≤–∞—Ç—å?", reply_markup=markup)

    elif isinstance(message, types.CallbackQuery):
        call = message
        await call.message.edit_text(text="–ß—Ç–æ –±—É–¥–µ—à—å –∑–∞–∫–∞–∑—ã–≤–∞—Ç—å?", reply_markup=markup)


### –ü–æ—Å—Ç—Ä–æ–µ–Ω–∏–µ –∫–∞—Ä—Ç–æ—á–µ–∫ –±–ª—é–¥, –ø–æ—Å–ª–µ –≤—ã–±–æ—Ä–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
async def build_item_cards(callback: types.CallbackQuery, category_id, state, **kwargs):
    category_info = await db.get_category_info(id=int(category_id))

    msg = await callback.message.edit_text(f"–ë–ª—é–¥–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ {category_info[0]['title']}")

    items = await db.get_all_items_in_category(category_id=int(category_id))
    message_id_list = [msg.message_id]
    data = await state.get_data()

    for item in items:
        item_id = item['id']
        info = await db.get_item_info(id=int(item_id))

        markup = await items_in_category_keyboard(item_id=int(item['id']), count=0, user_id=data['chat_id'])

        msg = await bot.send_photo(
            chat_id=callback.message.chat.id,
            photo=info[0]['photo'],
            caption=f"{info[0]['description']}\n –¶–µ–Ω–∞: {str(item['price'])[:-3]} —Ç–µ–Ω–≥–µ.",
            parse_mode="HTML",
            reply_markup=markup
        )

        message_id_list.append(msg.message_id)

    async with state.proxy() as data:
        data['message_id_list'] = message_id_list

    markup2 = InlineKeyboardMarkup()
    markup2.add(
        InlineKeyboardButton(text="–ù–∞–∑–∞–¥",
                             callback_data=make_callback_data(level=1,
                                                              what='back_order_shipping'))
    )
    await callback.message.answer(text="–î–æ–±–∞–≤–∏—Ç—å –¥—Ä—É–≥–∏–µ –±–ª—é–¥–∞", reply_markup=markup2)


### –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –±–ª—é–¥–∞ –≤ –∫–æ—Ä–∑–∏–Ω—É
async def add_order_item(callback: types.CallbackQuery, **kwargs):
    count = int(kwargs['count'][0])
    item_id = kwargs['item_id']

    user_id = callback.message.chat.id
    markup = await items_in_category_keyboard(item_id=kwargs['item_id'], count=count + 1)
    info = await db.get_item_info(id=int(kwargs['item_id']))
    try:
        cart_id = await db.update_cart(item_id=int(item_id),
                                       item_count=count + 1,
                                       user_id=str(user_id),
                                       title=info[0]['title'],
                                       price=info[0]['price'])
        if cart_id == []:
            raise Exception("Record not found")
    except Exception as _ex:
        cart_id = await db.add_new_cart(item_id=int(item_id),
                                        item_count=count + 1,
                                        user_id=str(user_id),
                                        title=info[0]['title'],
                                        price=info[0]['price']
                                        )

    await callback.message.edit_reply_markup(markup)


### –û—Ç–Ω–∏–º–∞–Ω–∏–µ –±–ª—é–¥–∞ –∏–∑ –∫–æ—Ä–∑–∏–Ω—ã
async def del_order_item(callback: types.CallbackQuery, **kwargs):
    count = int(kwargs['count'][0])

    if count > 0:
        item_id = kwargs['item_id']
        user_id = callback.message.chat.id
        markup = await items_in_category_keyboard(item_id, count=count - 1)
        try:
            cart_id = await db.update_cart(item_id=int(item_id), item_count=count - 1, user_id=str(user_id))
            if cart_id == []:
                raise Exception("Record not found")
        except Exception as _ex:
            cart_id = await db.add_new_cart(item_id=int(item_id), item_count=count - 1, user_id=str(user_id))
        await callback.message.edit_reply_markup(markup)


### –õ–æ–≤–ª—é –Ω–∞–∂–∞—Ç–∏–µ –Ω–∞ –∫–Ω–æ–ø–∫—É –û—Ñ–æ—Ä–º–∏—Ç—å –¥–æ—Å—Ç–∞–≤–∫—É
async def delivery_registration(callback: types.CallbackQuery, **kwargs):
    await callback.message.delete()
    await Shipping.data.set()

    date = datetime.now().strftime('%d.%m.%Y').split('.')
    text = "–ù–∞ –∫–∞–∫—É—é –¥–∞—Ç—É –æ—Ñ–æ—Ä–º–∏—Ç—å –¥–æ—Å—Ç–∞–≤–∫—É?\n"
    text += f"–í–≤–µ–¥–∏ –¥–∞—Ç—É –≤ —Ñ–æ—Ä–º–∞—Ç–µ –î–î.–ú–ú.–ì–ì–ì–ì \n –°–µ–≥–æ–¥–Ω—è {datetime.strftime(datetime.now(), '%d.%m.%Y')}"

    await callback.message.answer(text=text, reply_markup=cancel_btn)


### –õ–æ–≤–ª—é –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–∞—Ç—É –¥–æ—Å—Ç–∞–≤–∫–∏
@dp.message_handler(content_types=["text"], state=Shipping.data)
async def shipping_data(message: types.Message, state: FSMContext):
    try:
        date = message.text
        if len(date.split('.')) == 3:
            if (len(date.split('.')[0]) == 2) and (len(date.split('.')[1]) == 2) and (len(date.split('.')[2]) == 4):
                if datetime.strptime(date, "%d.%m.%Y") < datetime.now():
                    raise Exception('data error')
                else:
                    async with state.proxy() as data:
                        data["data"] = datetime.strptime(message.text.replace(".", "-"), "%d-%m-%Y").date()

                    await Shipping.time.set()

                    text = "–ö –∫–∞–∫–æ–º—É –≤—Ä–µ–º–µ–Ω–∏ –¥–æ—Å—Ç–≤–∏—Ç—å? –í–≤–µ–¥–∏ –≤—Ä–µ–º—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ –ß–ß.–ú–ú, –ß–ß:–ú–ú, –ß–ß-–ú–ú –∏–ª–∏ –ß–ß –ú–ú"
                    await message.answer(text, parse_mode=types.ParseMode.HTML)
        else:
            raise Exception("input error")
    except Exception as _ex:
        if (str(_ex) == 'input error') or (str(_ex) == 'day is out of range for month'):
            text = f"–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é —è –¢–µ–±—è –Ω–µ –ø–æ–Ω–∏–º–∞—é, –≤–≤–µ–¥–∏—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é –¥–∞—Ç—É –≤ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–º —Ñ–æ—Ä–º–∞—Ç–µ –î–î.–ú–ú.–ì–ì–ì–ì, —Å–µ–≥–æ–¥–Ω—è {datetime.strftime(datetime.now(), '%d.%m.%Y')}"

        elif str(_ex) == 'data error':
            #–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é –≤—Ä–µ–º—è –Ω–µ –≤–µ—Ä–Ω—É—Ç—å –Ω–∞–∑–∞–¥, —É–∫–∞–∂–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é –¥–∞—Ç—É, —Å–µ–≥–æ–¥–Ω—è 24.02.2023
            text = f"–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é –≤—Ä–µ–º—è –Ω–µ –≤–µ—Ä–Ω—É—Ç—å –Ω–∞–∑–∞–¥ üò¢ –í–≤–µ–¥–∏ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é –¥–∞—Ç—É –≤ —Ñ–æ—Ä–º–∞—Ç–µ –î–î.–ú–ú.–ì–ì–ì–ì, —Å–µ–≥–æ–¥–Ω—è {datetime.strftime(datetime.now(), '%d.%m.%Y')}"

        text = ""
        await message.answer(text=text)
        return


### –õ–æ–≤–ª—é –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤—Ä–µ–º—è –¥–æ—Å—Ç–∞–≤–∫–∏
@dp.message_handler(content_types=["text"], state=Shipping.time)
async def shipping_time(message: types.Message, state: FSMContext):
    await Shipping.number_of_devices.set()
    msg = message.text
    data = await state.get_data()
    try:
        if len(msg) == 5:
            if " " in msg:
                msg = msg.replace(" ", ":")
            elif "." in msg:
                msg = msg.replace(".", ":")
            elif "-" in msg:
                msg = msg.replace("-", ":")

            msg = msg + ":00"

            time = datetime.strptime(msg, '%H:%M:%S').time()
            if data['data'] == datetime.now() and time < datetime.now().time():
                raise Exception('time error')
            else:
                await Shipping.address.set()

                async with state.proxy() as data:
                    data["time"] = time.strftime("%H:%M:%S")

                await message.answer("–°–∫–æ–ª—å–∫–æ –ø—Ä–∏–±–æ—Ä–æ–≤ –ø–æ—Ç—Ä–µ–±—É–µ—Ç—Å—è?",
                                     parse_mode=types.ParseMode.HTML)
    except Exception as _ex:
        if str(_ex) == 'time error':
            text = "–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é –≤—Ä–µ–º—è –Ω–µ –≤–µ—Ä–Ω—É—Ç—å –Ω–∞–∑–∞–¥ üò¢ –í–≤–µ–¥–∏ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –≤—Ä–µ–º—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ –ß–ß.–ú–ú, –ß–ß:–ú–ú, –ß–ß-–ú–ú –∏–ª–∏ –ß–ß –ú–ú"
        else:
            text = "–Ø –¢–µ–±—è, –∫ —Å–æ–∂–∞–ª–µ–Ω–∏—é, –Ω–µ –ø–æ–Ω–∏–º–∞—é. –í–≤–µ–¥–∏ –≤—Ä–µ–º—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ –ß–ß.–ú–ú, –ß–ß:–ú–ú, –ß–ß-–ú–ú –∏–ª–∏ –ß–ß –ú–ú"

        await message.answer(text=text)
        return


### –õ–æ–≤–ª—é –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∫–æ–ª-–≤–æ –ø—Ä–∏–±–æ—Ä–æ–≤
@dp.message_handler(content_types=["text"], state=Shipping.number_of_devices)
async def shipping_number_of_devices(message: types.Message, state: FSMContext):
    if message.text.isdigit():
        await Shipping.address.set()
        async with state.proxy() as data:
            data['number_of_devices'] = message.text

        date = datetime.now().strftime('%d.%m.%Y').split('.')
        text = "–í–≤–µ–¥–∏ –∞–¥—Ä–µ—Å –¥–æ—Å—Ç–∞–≤–∫–∏\n"
        await message.answer(text=text, reply_markup=cancel_btn)
    else:
        text = "–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é —è –¢–µ–±—è –Ω–µ –ø–æ–Ω–∏–º–∞—é, –≤–≤–µ–¥–∏ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ!!! \n–°–∫–æ–ª—å–∫–æ –ø—Ä–∏–±–æ—Ä–æ–≤ –ø–æ—Ç—Ä–µ–±—É–µ—Ç—Å—è?"
        await message.answer(text=text, reply_markup=cancel_btn)


### –õ–æ–≤–ª—é –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∞–¥—Ä–µ—Å –¥–æ—Å—Ç–∞–≤–∫–∏
@dp.message_handler(content_types=["text"], state=Shipping.address)
async def shipping_address(message: types.Message, state: FSMContext):
    await Shipping.phone.set()

    text = "–í–≤–µ–¥–∏ –∏–ª–∏ –æ—Ç–ø—Ä–∞–≤—å –°–≤–æ–π –∫–æ–Ω—Ç–∞–∫—Ç–Ω—ã–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ "
    msg = await message.answer(text=text, reply_markup=send_phone_cancel)

    async with state.proxy() as data:
        data['address'] = message.text
        data['message_id'] = msg.message_id


### –õ–æ–≤–ª—é –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∫–æ–Ω—Ç–∞–∫—Ç–Ω—ã–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞
@dp.message_handler(content_types=["contact", "text"], state=Shipping.phone)
async def shipping_address(message: types.Message, state: FSMContext):
    await Shipping.pay_method.set()

    async with state.proxy() as data:
        if message.content_type == 'contact':
            if message.contact.phone_number[0] != "+":
                data["phone_number"] = "+" + message.contact.phone_number
            else:
                data["phone_number"] = message.contact.phone_number
            data["name"] = message.contact.last_name
        else:
            data["phone_number"] = message.text
            data["name"] = message.from_user.username

    text = "üí≥ vs üíµ"
    msg = await message.answer(text=text, reply_markup=cancel_btn)
    markup = InlineKeyboardMarkup()
    markup.add(
        InlineKeyboardButton(text="üí≥ –ö–∞—Ä—Ç–∞", callback_data="pay_method_card"),
        InlineKeyboardButton(text="üíµ –ù–∞–ª–∏—á–∫–∞", callback_data="pay_method_money"),
    )
    await message.answer(text="–í—ã–±–µ—Ä–∏ —Å–ø–æ—Å–æ–± –æ–ø–ª–∞—Ç—ã", reply_markup=markup)


### –õ–æ–≤–ª—é –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å–ø–æ—Å–æ–± –æ–ø–ª–∞—Ç—ã
@dp.callback_query_handler(text=["pay_method_card", "pay_method_money"], state=Shipping.pay_method)
async def shipping_pay_method(call: types.CallbackQuery, state: FSMContext):
    await Shipping.check.set()
    await call.message.edit_reply_markup(reply_markup="")

    cart_info = await db.cart_info(user_id=str(call.message.chat.id))
    async with state.proxy() as data:
        data['pay_method'] = call.data

    text = "–í–∞—à –∑–∞–∫–∞–∑\n"
    summa = 0
    for item in cart_info:
        text += f"{item['title']}\n–ö–æ–ª-–≤–æ –ø–æ—Ä—Ü–∏–π: {item['item_count']}\n–¶–µ–Ω–∞: {item['price']}\n\n"
        summa += item['item_count'] * item['price']

    text += f"–û–±—â–∞—è —Å—É–º–º–∞ –∑–∞–∫–∞–∑–∞: {summa}"
    await call.message.answer(text=text, reply_markup=cancel_btn)

    await call.message.answer(text=text, reply_markup=user_inline_approve)


### –õ–æ–≤–ª—é –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∞
@dp.callback_query_handler(text=["approve_order_user", "cancel_order_user"], state=Shipping.check)
async def shipping_user_check_data(call: types.CallbackQuery, state: FSMContext):
    await call.message.edit_reply_markup(reply_markup="")
    await call.message.delete()

    await call.answer(cache_time=60)

    if call.data == "approve_order_user":
        data = await state.get_data()

        order_id = await db.add_new_shipping_order(
            title=data['title'],
            number_of_devices=int(data['number_of_devices']),
            address=data['address'], phone=data['phone_number'], data_reservation=data['data'],
            time_reservation=data['time'][:-3], pay_method=data['pay_method'], user_id=str(data['user_id']),
            user_name=data['user_name']
        )
        text = f"{data['user_name']} –¢–≤–æ—è –∑–∞—è–≤–∫–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –Ω–∞—à–µ–º—É —Å–æ—Ç—Ä—É–¥–Ω–∏–∫—É. –û–∂–∏–¥–∞–π. –û–Ω —Å –¢–æ–±–æ–π —Å–∫–æ—Ä–æ —Å–≤—è–∂–µ—Ç—Å—è"
        await call.message.answer(text=text, reply_markup=menuUser)
        text = "–ü–æ—Å—Ç—É–ø–∏–ª–∞ –∑–∞—è–≤–∫–∞ –Ω–∞ –¥–æ—Å—Ç–∞–≤–∫—É\n"
        text += f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å @{data['user_name']} –∑–∞–∫–∞–∑–∞–ª:\n"

        text += f"–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–∏–±–æ—Ä–æ–≤: {data['number_of_devices']}\n"
        text += f"–î–∞—Ç–∞ –¥–æ—Å—Ç–∞–≤–∫–∏: {data['data']}\n"
        text += f"–í—Ä–µ–º—è –¥–æ—Å—Ç–∞–≤–∫–∏: {data['time']}\n"
        text += f"–ê–¥—Ä–µ—Å –¥–æ—Å—Ç–∞–≤–∫–∏: {data['address']}\n"
        if data['pay_method'] == "pay_method_card":
            text += "–°–ø–æ—Å–æ–± –æ–ø–ª–∞—Ç—ã: –ö–∞—Ä—Ç–∞\n"
        elif data['pay_method'] == "pay_method_money":
            text += "–°–ø–æ—Å–æ–± –æ–ø–ª–∞—Ç—ã: –ù–∞–ª–∏—á–Ω—ã–µ\n"
        text += f"–ö–æ–Ω—Ç–∞–∫—Ç–Ω—ã–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞: {data['phone_number']}\n"

        markup = InlineKeyboardMarkup()

        markup.add(
            InlineKeyboardButton(text="–í–∑—è—Ç—å –≤ —Ä–∞–±–æ—Ç—É", callback_data=f"admin_approve_shipping-{order_id}"),
            InlineKeyboardButton(text="–û—Ç–º–µ–Ω–∞", callback_data=f"admin_cancel_shipping-{order_id}")
        )
        markup.row(
            InlineKeyboardButton("–ù–∞–ø–∏—Å–∞—Ç—å –≥–æ—Å—Ç—é –≤ –õ–°", callback_data=f"shipping_write_to_pm-{order_id}",
                                 url=f"https://t.me/{data['user_name']}")
        )

        await bot.send_message(chat_id=admins[0], text=text, reply_markup=markup)
        await state.finish()

    elif call.data == "cancel_order_user":
        await Shipping.data.set()
        text = "–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"
        await call.message.answer(text=text, reply_markup=menuUser)