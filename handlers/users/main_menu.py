from typing import Union

from handlers.users.user_order_shipping import build_category_keyboard
from loader import dp, bot
import re
from datetime import datetime

from aiogram import types
from keyboards.default import *
from keyboards.inline import *

from aiogram.dispatcher.filters import Text

from data.config import admins
from aiogram.dispatcher import FSMContext

from states.analytics import Analytics
from states.config import ConfigAdmins, MainMenu
from states.mailings import Mailings
from states.question import Question
from states.restoran import TableReservation
from states.reviews import Review
from states.shipping import Shipping


# –û—Ç–º–µ–Ω–∞ –¥–µ–π—Å—Ç–≤–∏—è
@dp.message_handler(Text(contains="–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"), state="*")
async def cancel(message: types.Message, state=FSMContext):
    """–õ–æ–≤–ª—é –Ω–∞–∂–∞—Ç–∏–µ –Ω–∞ –∫–Ω–æ–ø–∫—É –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"""
    await db.update_last_activity(user_id=message.from_user.id, button='–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é')
    current_state = await state.get_state()

    data = await state.get_data()
    await message.delete()

    if str(message.from_user.id) in admins:
        await message.answer("–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", reply_markup=menuAdmin)
    else:
        await message.answer("–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", reply_markup=menuUser)

    if current_state == "MainMenu:main":
        if data != {}:
            await bot.delete_message(chat_id=message.from_user.id, message_id=data['message_id'])
        else:
            await bot.delete_message(chat_id=message.from_user.id, message_id=message.message_id - 1)

    elif (re.search(r"ConfigAdmins:config_admins_", current_state)
          or re.search(r"ConfigBlackList:config_blacklist", current_state)
          or re.search(r"ConfigAdmins:config_main", current_state)
          or re.search(r"Mailings", current_state)
          or re.search(r"Analytics:main", current_state)):

        if data['id_msg_list']:
            for id_msg in data['id_msg_list']:
                try:
                    await bot.delete_message(chat_id=message.from_user.id, message_id=id_msg)
                except Exception as ex:
                    pass

    await state.finish()
    await db.delete_cart(str(message.chat.id))


@dp.message_handler(Text(contains=["–û —Ä–µ—Å—Ç–æ—Ä–∞–Ω–µ"]))
async def menu(message: Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–∂–∞—Ç–∏—è –Ω–∞ –∫–Ω–æ–ø–∫—É –û –†–µ—Å—Ç–æ—Ä–∞–Ω–µ"""
    await db.update_last_activity(user_id=message.from_user.id, button='–û —Ä–µ—Å—Ç–æ—Ä–∞–Ω–µ')
    text = f"https://teletype.in/@andreytikhonov/uJftR9aBA"
    await message.answer(text)


@dp.message_handler(Text(contains=["–û—Ç–∑—ã–≤—ã"]), state="*")
async def reviews(message: types.Message, state: FSMContext):
    """–°—Ç–µ–Ω–∞ —Å –æ—Ç–∑—ã–≤–∞–º–∏"""
    reviews = await db.get_approved_reviews()

    for item in reviews[-15:]:
        text = f"–û—Ç–∑—ã–≤ –æ—Å—Ç–∞–≤–∏–ª @{item['username']}\n"
        text += f"{item['text']}"
        await message.answer(text=text)
    markup = InlineKeyboardMarkup()

    markup.add(
        InlineKeyboardButton(text="–û—Å—Ç–∞–≤–∏—Ç—å –æ—Ç–∑—ã–≤", callback_data="review")
    )
    await message.answer(text="–û—Å—Ç–∞–≤—å—Ç–µ —Å–≤–æ–π –æ—Ç–∑—ã–≤ - –ú—ã –±—É–¥–µ–º –í–∞–º –±–ª–∞–≥–æ–¥–∞—Ä–Ω—ã ü§ó", reply_markup=markup)


@dp.callback_query_handler(text="review", state="*")
async def new_review(call: types.CallbackQuery, state: FSMContext):
    """–ù–∞–∂–∞—Ç–∏–µ –Ω–∞ –∫–Ω–æ–ø–∫—É –û—Å—Ç–∞–≤–∏—Ç—å –æ–∑—ã–≤"""
    await call.message.answer("–ù–∞–ø–∏—à–∏—Ç–µ –í–∞—à –æ—Ç–∑—ã–≤")
    await Review.send_review.set()


@dp.message_handler(content_types=["text"], state=Review.send_review)
async def review_text(message: types.Message, state: FSMContext):
    """–õ–æ–≤–ª—é —Ç–µ–∫—Å—Ç –æ—Ç–∑—ã–≤–∞ –∏ –æ—Ç–ø—Ä–∞–≤–ª—è—é –µ–≥–æ –Ω–∞ –º–æ–¥–µ—Ä–∞—Ü–∏—é –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É"""
    await state.finish()

    text = "–ë–ª–∞–≥–æ–¥–∞—Ä–∏–º –í–∞—Å –∑–∞ –æ–±—Ä–∞—Ç–Ω—É—é —Å–≤—è–∑—å ü§ó\n"
    text +="–í–∞—à –æ—Ç–∑—ã–≤ —Å–∫–æ—Ä–æ –ø–æ—è–≤–∏—Ç—Å—è –Ω–∞ –Ω–∞—à–µ–π —Å—Ç–µ–Ω–µ"
    await message.answer(text=text)
    review_text = message.text.strip()
    username = message.from_user.username

    text = f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å @{username} –æ—Å—Ç–∞–≤–∏–ª –æ—Ç–∑—ã–≤:\n"
    text = f"{review_text}"
    review_id = await db.add_new_review(text=review_text, username=username)

    markup = InlineKeyboardMarkup()

    markup.add(
        InlineKeyboardButton(text="–û–ø—É–±–ª–∏–∫–æ–≤–∞—Ç—å", callback_data=f"approve_review-{review_id[0]['id']}"),
    )
    for admin in admins:
        await bot.send_message(chat_id=admin, text=text, reply_markup=markup)


@dp.callback_query_handler(text_contains=["approve_review"], state="*")
async def approve_review(call: types.CallbackQuery, state: FSMContext):
    """–û–¥–æ–±—Ä–µ–Ω–∏–µ –æ—Ç–∑—ã–≤–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º"""
    data = call.data.split('-')
    await db.update_status_review(id=int(data[-1]))
    await call.answer()


@dp.message_handler(Text(contains=["–ú–µ–Ω—é"]), state="*")
async def menu(message: Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–∂–∞—Ç–∏—è –Ω–∞ –∫–Ω–æ–ø–∫—É –ú–µ–Ω—é"""
    await db.update_last_activity(user_id=message.from_user.id, button='–ú–µ–Ω—é')
    text = f"–ú–µ–Ω—é –∫ –í–∞—à–∏–º —É—Å–ª—É–≥–∞–º"
    msg = await message.answer(text=text, reply_markup=ReplyKeyboardRemove())
    await bot.delete_message(chat_id=message.chat.id, message_id=msg.message_id)
    # await MainMenu.main.set()
    markup = await show_menu_buttons(message_id=msg.message_id + 1)
    await bot.send_message(chat_id=message.from_user.id, text=text, reply_markup=markup)


@dp.message_handler(Text(contains=["–í—ã–∑–æ–≤ –ø–µ—Ä—Å–æ–Ω–∞–ª–∞"]), state="*")
async def ansver_menu(message: Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–∂–∞—Ç–∏—è –Ω–∞ –∫–Ω–æ–ø–∫—É –≤—ã–∑–æ–≤ –ø–µ—Ä—Å–æ–Ω–∞–ª–∞"""
    await db.update_last_activity(user_id=message.from_user.id, button='–í—ã–∑–æ–≤ –ø–µ—Ä—Å–æ–Ω–∞–ª–∞')
    text = f"–ú–µ–Ω—é –≤—ã–∑–æ–≤–∞ –ø–µ—Ä—Å–æ–Ω–∞–ª–∞ –Ω–∏–∂–µ"
    await MainMenu.main.set()
    await message.answer(text=text, reply_markup=menuPersonal)


@dp.callback_query_handler(text=["hall_reservation_mailings"], state="*")
@dp.message_handler(Text(contains="–ó–∞–±—Ä–æ–Ω–∏—Ä–æ–≤–∞—Ç—å —Å—Ç–æ–ª"), state=None)
async def table_reservation(message: Union[types.Message, types.CallbackQuery], state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–∂–∞—Ç–∏—è –Ω–∞ –∫–Ω–æ–ø–∫—É –ó–∞–±—Ä–æ–Ω–∏—Ä–æ–≤–∞—Ç—å —Å—Ç–æ–ª"""
    await db.update_last_activity(user_id=message.from_user.id, button='–ó–∞–±—Ä–æ–Ω–∏—Ä–æ–≤–∞—Ç—å —Å—Ç–æ–ª')
    await TableReservation.data.set()

    date = datetime.now().strftime('%d.%m.%Y')
    text = f"<b>–®–∞–≥ [1/5]</b>\n\n –í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –≤ —Ñ–æ—Ä–º–∞—Ç–µ –î–î.–ú–ú.–ì–ì–ì–ì, —Å–µ–≥–æ–¥–Ω—è {date}"
    if isinstance(message, types.Message):
        await message.answer(text, reply_markup=cancel_btn, parse_mode=types.ParseMode.HTML)
    elif isinstance(message, types.CallbackQuery):
        call = message
        await call.message.answer(text, reply_markup=cancel_btn, parse_mode=types.ParseMode.HTML)


@dp.callback_query_handler(text=["order_shipping_mailings"], state="*")
@dp.message_handler(Text(contains="–î–æ—Å—Ç–∞–≤–∫–∞"), state=None)
async def show_menu_order_shipping(message: Union[types.Message, types.CallbackQuery], state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–∂–∞—Ç–∏—è –Ω–∞ –∫–Ω–æ–ø–∫—É –û—Ñ–æ—Ä–º–∏—Ç—å –∑–∞–∫–∞–∑ –Ω–∞ –¥–æ—Å—Ç–∞–≤–∫—É"""
    await Shipping.main.set()
    if isinstance(message, types.Message):
        await db.update_last_activity(user_id=message.from_user.id, button='–û—Ñ–æ—Ä–º–∏—Ç—å –¥–æ—Å—Ç–∞–≤–∫—É')
        await db.delete_cart(str(message.chat.id))
        await message.delete()
        await message.answer('–û—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ –∑–∞–∫–∞–∑–∞ –Ω–∞ –¥–æ—Å—Ç–∞–≤–∫—É', reply_markup=ReplyKeyboardRemove())
        message_id = message.message_id + 2
        user_id = message.from_user.id

    elif isinstance(message, types.CallbackQuery):
        call = message
        await db.update_last_activity(user_id=call.message.from_user.id, button='–û—Ñ–æ—Ä–º–∏—Ç—å –¥–æ—Å—Ç–∞–≤–∫—É')
        await db.delete_cart(str(call.message.chat.id))
        await call.message.edit_text('–û—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ –∑–∞–∫–∞–∑–∞ –Ω–∞ –¥–æ—Å—Ç–∞–≤–∫—É')
        message_id = call.message.message_id + 2
        user_id = call.message.from_user.id

    await build_category_keyboard(message, state)

    async with state.proxy() as data:
        data["message_id"] = message_id
        data["chat_id"] = user_id


@dp.message_handler(Text(contains="–ü—Ä–æ–≥—Ä–∞–º–º–∞ –ª–æ—è–ª—å–Ω–æ—Å—Ç–∏"), state=None)
async def reg_loyal_card(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–∂–∞—Ç–∏—è –Ω–∞ –∫–Ω–æ–ø–∫—É –ü—Ä–æ–≥—Ä–∞–º–º–∞ –ª–æ—è–ª—å–Ω–æ—Å—Ç–∏"""
    await db.update_last_activity(user_id=message.from_user.id, button='–ü—Ä–æ–≥—Ä–∞–º–º–∞ –ª–æ—è–ª—å–Ω–æ—Å—Ç–∏')
    info = await db.get_user_info(message.from_user.id)
    await MainMenu.main.set()
    if info[0]['card_status'] != True:
        text = "–û—Ñ–æ—Ä–º–∏—Ç–µ –∫–∞—Ä—Ç—É —Å–∫–∏–¥–æ–∫!!!"
    else:
        text = "–ú–µ–Ω—é –ø—Ä–æ–≥—Ä–∞–º–º—ã –ª–æ—è–ª—å–Ω–æ—Å—Ç–∏"
    await message.delete()
    await message.answer(text, reply_markup=menuLoyality, parse_mode=types.ParseMode.HTML)


@dp.message_handler(Text(contains="–ó–∞–¥–∞–π—Ç–µ –Ω–∞–º –≤–æ–ø—Ä–æ—Å"), state="*")
async def ask_question(message: Message, state: FSMContext):
    """–ó–∞–¥–∞–π—Ç–µ –Ω–∞–º –≤–æ–ø—Ä–æ—Å"""
    await Question.ask_questions.set()
    await message.answer(text="–ó–∞–¥–∞–π—Ç–µ –í–∞—à –≤–æ–ø—Ä–æ—Å", reply_markup=cancel_btn)


@dp.message_handler(content_types=["text"], state=Question.ask_questions)
async def send_question_to_admin(message: types.Message, state: FSMContext):
    """–õ–æ–≤–ª—é –≤–æ–ø—Ä–æ—Å –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –æ—Ç–ø—Ä–∞–≤–ª—è—é –µ–≥–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É"""
    question_text = message.text.strip()
    markup = InlineKeyboardMarkup()
    markup.add(
        InlineKeyboardButton(text="–û—Ç–≤–µ—Ç–∏—Ç—å –≤ –õ–°", callback_data="", url=f"https://t.me/{message.from_user.username}")
    )

    text = f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å @{message.from_user.username} –∑–∞–¥–∞–µ—Ç –≤–æ–ø—Ä–æ—Å:\n"
    text += f"{question_text}\n"

    for admin in admins:
        await bot.send_message(chat_id=admin, text=text, reply_markup=markup)
    await state.finish()
    text = "–ë–ª–∞–≥–æ–¥–∞—Ä–∏–º –í–∞—Å –∑–∞ –æ–±—Ä–∞—Ç–Ω—É—é —Å–≤—è–∑—å ü§ó. –° –í–∞–º–∏ —Å–∫–æ—Ä–æ —Å–≤—è–∂–µ—Ç—Å—è –Ω–∞—à –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä."
    if str(message.from_user.id) in admins:
        await message.answer(text=text, reply_markup=menuAdmin)
    else:
        await message.answer(text=text, reply_markup=menuUser)


@dp.message_handler(Text(contains="–ê–∫—Ü–∏–∏"), state="*")
async def promotions(message: Message):
    """–õ—é–≤–ª—é –Ω–∞–∂–∞—Ç–∏–µ –Ω–∞ –∫–Ω–æ–ø–∫—É –ê–∫—Ü–∏–∏"""
    await db.update_last_activity(user_id=message.from_user.id, button='–ê–∫—Ü–∏–∏')
    text = f"https://teletype.in/@andreytikhonov/uJftR9aBA"
    await message.answer(text=text)


@dp.message_handler(Text(contains="–°–¥–µ–ª–∞—Ç—å —Ä–∞—Å—Å—ã–ª–∫—É –ø–æ–¥–ø–∏—Å—á–∏–∫–∞–º"), state="*")
async def newsletter(message: Message):
    """–õ—é–≤–ª—é –Ω–∞–∂–∞—Ç–∏–µ –Ω–∞ –∫–Ω–æ–ø–∫—É –°–¥–µ–ª–∞—Ç—å —Ä–∞—Å—Å—ã–ª–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º"""
    text = "–ú–µ–Ω—é —Ä–∞—Å—Å—ã–ª–∫–∏"
    await Mailings.main.set()
    await message.answer(text=text, reply_markup=newsletter_kbd)


@dp.message_handler(Text(contains=["–ù–∞—Å—Ç—Ä–æ–π–∫–∏"]), state="*")
async def admin_config(message: Message, state: FSMContext):
    """–õ–æ–≤–ª—é –Ω–∞–∂–∞—Ç–∏–µ –Ω–∞ –∫–Ω–æ–ø–∫—É –ù–∞—Å—Ç—Ä–æ–π–∫–∏"""
    text = "–ú–µ–Ω—é –Ω–∞—Å—Ç—Ä–æ–µ–∫"
    await ConfigAdmins.config_main.set()
    async with state.proxy() as data:
        data['id_msg_list'] = []
    await message.answer(text=text, reply_markup=menu_admin_config)


@dp.message_handler(Text(contains=["–ê–Ω–∞–ª–∏—Ç–∏–∫–∞"]), state="*")
async def analytics(message: Message, state: FSMContext):
    """–õ–æ–≤–ª—é –Ω–∞–∂–∞—Ç–∏–µ –Ω–∞ –∫–Ω–æ–ø–∫—É –ê–Ω–∞–ª–∏—Ç–∏–∫–∞"""
    await message.delete()
    text = "–ê–Ω–∞–ª–∏—Ç–∏–∫–∞"
    await Analytics.main.set()
    async with state.proxy() as data:
        data['id_msg_list'] = []
    await message.answer(text=text, reply_markup=analytics_kbd)
