CREATE EXTENSION if not exists pgcrypto;
CREATE OR REPLACE FUNCTION update_updated_at_column()
        RETURNS TRIGGER AS $$
        BEGIN
            NEW.updated_at = timezone('Asia/Almaty', NOW());
            RETURN NEW;
        END;
        $$ LANGUAGE plpgsql;

create table if not exists users
(
    id int GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    user_id text UNIQUE,
    username text UNIQUE,
    full_name text,
    gender varchar(1),
    employment text,
    referral text,
    referral_id text unique not null default gen_random_uuid(),
    card_fio text,
    card_phone text,
    card_number bigint UNIQUE default floor(random()*(999999-10+1))+1,
    card_status boolean default FALSE,
    birthday date,
    created_at DATE NOT NULL DEFAULT timezone('Asia/Almaty', CURRENT_TIMESTAMP)::DATE,
    updated_at DATE NOT NULL DEFAULT timezone('Asia/Almaty', CURRENT_TIMESTAMP)::DATE,
    prize int default 0,
    balance int default 0,
    administrator boolean default FALSE,
    director boolean default FALSE,
    ban_status boolean default FALSE,
    reason_for_ban text,
    last_activity text
);

DO $$
BEGIN
IF NOT EXISTS (SELECT 1 FROM pg_trigger WHERE tgname = 'update_users_updated_at') THEN
    CREATE TRIGGER update_users_updated_at
        BEFORE UPDATE ON users
        FOR EACH ROW
        EXECUTE FUNCTION update_updated_at_column();
END IF;
END $$;

create table if not exists prize_codes
(
    id int GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    code bigint UNIQUE default floor(random()*(999999-10+1))+1,
    code_description text,
    user_id text,
    code_status boolean default TRUE,
    foreign key (user_id) references users(user_id)
);

create table if not exists orders_hall
(
    id int GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    admin_id text,
    admin_name text,
    created_at DATE NOT NULL DEFAULT timezone('Asia/Almaty', CURRENT_TIMESTAMP)::DATE,
    updated_at DATE NOT NULL DEFAULT timezone('Asia/Almaty', CURRENT_TIMESTAMP)::DATE,
    last_activity text,
    order_status boolean default FALSE,
    table_number smallint,
    admin_answer varchar(12),
    chat_id text,
    user_id text,
    username text,
    full_name text,
    data_reservation DATE NOT NULL,
    time_reservation varchar(5),
    number_person smallint,
    phone text,
    comment text
);

DO $$
BEGIN
IF NOT EXISTS (SELECT 1 FROM pg_trigger WHERE tgname = 'update_orders_hall_updated_at') THEN
    CREATE TRIGGER update_orders_hall_updated_at
        BEFORE UPDATE ON orders_hall
        FOR EACH ROW
        EXECUTE FUNCTION update_updated_at_column();
END IF;
END $$;

create table if not exists category_menu
(
    id int GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    title text,
    photo text,
    position smallint default 0,
    url text
);

create table if not exists items_menu
(
    id int GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    title varchar(50),
    description  text,
    photo text,
    price numeric(9, 2),
    category_id int,
    foreign key (category_id) references category_menu(id) ON DELETE CASCADE
);


create table if not exists cart
(
    id int GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    item_id int,
    item_count int,
    title varchar(50),
    price numeric(9, 2),
    created_at DATE NOT NULL DEFAULT timezone('Asia/Almaty', CURRENT_TIMESTAMP)::DATE,
    updated_at DATE NOT NULL DEFAULT timezone('Asia/Almaty', CURRENT_TIMESTAMP)::DATE,
    order_status boolean default FALSE,
    user_id text
);

DO $$
BEGIN
IF NOT EXISTS (SELECT 1 FROM pg_trigger WHERE tgname = 'update_cart_updated_at') THEN
    CREATE TRIGGER update_cart_updated_at
        BEFORE UPDATE ON cart
        FOR EACH ROW
        EXECUTE FUNCTION update_updated_at_column();
END IF;
END $$;


create table if not exists shipping
(
    id int GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    tpc json,
    number_of_devices int,
    address text,
    phone text,
    data_reservation DATE NOT NULL,
    time_reservation varchar(5),
    final_summa numeric(9, 2),
    pay_method varchar(16),
    created_at DATE NOT NULL DEFAULT timezone('Asia/Almaty', CURRENT_TIMESTAMP)::DATE,
    updated_at DATE NOT NULL DEFAULT timezone('Asia/Almaty', CURRENT_TIMESTAMP)::DATE,
    order_status boolean default TRUE,
    admin_name text,
    admin_id text,
    admin_answer text,
    user_id text,
    user_name text
);

DO $$
BEGIN
IF NOT EXISTS (SELECT 1 FROM pg_trigger WHERE tgname = 'update_shipping_updated_at') THEN
    CREATE TRIGGER update_shipping_updated_at
        BEFORE UPDATE ON shipping
        FOR EACH ROW
        EXECUTE FUNCTION update_updated_at_column();
END IF;
END $$;

create table if not exists task
(
    id int GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    created_at DATE NOT NULL DEFAULT timezone('Asia/Almaty', CURRENT_TIMESTAMP)::DATE,
    updated_at DATE NOT NULL DEFAULT timezone('Asia/Almaty', CURRENT_TIMESTAMP)::DATE,
    execution_date TIMESTAMP,
    admin_name text,
    type_mailing text,
    picture text,
    message text,
    status text DEFAULT 'draft',
    error text
);

DO $$
BEGIN
IF NOT EXISTS (SELECT 1 FROM pg_trigger WHERE tgname = 'update_task_updated_at') THEN
    CREATE TRIGGER update_task_updated_at
        BEFORE UPDATE ON task
        FOR EACH ROW
        EXECUTE FUNCTION update_updated_at_column();
END IF;
END $$;

create table if not exists personal
(
    id int GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    created_at DATE NOT NULL DEFAULT timezone('Asia/Almaty', CURRENT_TIMESTAMP)::DATE,
    table_number text,
    personal text,
    comment text
);

create table if not exists review
(
    id int GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    created_at DATE NOT NULL DEFAULT timezone('Asia/Almaty', CURRENT_TIMESTAMP)::DATE,
    updated_at DATE NOT NULL DEFAULT timezone('Asia/Almaty', CURRENT_TIMESTAMP)::DATE,
    text text,
    username text,
    status boolean default FALSE,
    admin_id text
);

DO $$
BEGIN
IF NOT EXISTS (SELECT 1 FROM pg_trigger WHERE tgname = 'update_review_updated_at') THEN
    CREATE TRIGGER update_review_updated_at
        BEFORE UPDATE ON review
        FOR EACH ROW
        EXECUTE FUNCTION update_updated_at_column();
END IF;
END $$;

create table if not exists promotions
(
    id int GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    created_at DATE NOT NULL DEFAULT timezone('Asia/Almaty', CURRENT_TIMESTAMP)::DATE,
    updated_at DATE NOT NULL DEFAULT timezone('Asia/Almaty', CURRENT_TIMESTAMP)::DATE,
    url text,
    status boolean default FALSE

);

DO $$
BEGIN
IF NOT EXISTS (SELECT 1 FROM pg_trigger WHERE tgname = 'update_promotions_updated_at') THEN
    CREATE TRIGGER update_promotions_updated_at
        BEFORE UPDATE ON promotions
        FOR EACH ROW
        EXECUTE FUNCTION update_updated_at_column();
END IF;
END $$;